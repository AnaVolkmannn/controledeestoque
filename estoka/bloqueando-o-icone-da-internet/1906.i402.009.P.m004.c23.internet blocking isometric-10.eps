%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1906.i402.009.P.m004.c23.Internet blocking isometric-10.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 7/29/2021
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 10 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=100 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2021-07-29T02:42:22+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2021-07-29T02:42:22+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2021-07-29T02:42:22+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qwL8w9Q87NexaVoUL&#xA;wWUsYa41Ffg3ZmBX1jtHQLXb4vwrga3PKA58Me/9r0XY2HScJyZjcgdo/s6/d+gz/LnSo9N0SWEX&#xA;BuZmnZrh6tw9QqteAY1p4kgVNcj2ZqIZcZMDY4v1cnF7aznLlBrhHDt31vz/AByZVmxdO7FXYq7F&#xA;XYq7FVG8vLSytpLq7lWC3iHKSVyFUDp1OAyAFlnjxynIRiLkWGzfmFe3k8Z0SyT9HlqLeXxaL6wT&#xA;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&#xA;srVlZGmkWC4t3U0Zl9CJYZ0kUlXV0B8GoSM20NbGX94P2/q97pp4CPo5vUIY2jhSNpGlZFCmR6cm&#xA;IHU8QoqfYZrZGzdU5URQpfgS7FXYq7FXYql3mDRbbWtKm0+4AKScWBI6MjBgRShHTthiI36hxDub&#xA;MWbJjPFjPDLvU7Pyxo9rGiJaxhY5PWRQNhIOjHuSPfLfGIFDYVTRKPFLiluSjr+3NxYXFuqhjNE8&#xA;YUtwB5KRTkFfj168TlcCLFspXWzDPyr/AC6n8nWM5ubhJbu+htVuYowfTSS2RkLK7Hk3IMOwpTMn&#xA;VZxkIrpbVhgY82dZiNzsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqFvtRgtEHL45WIEcS05Ek0HXoPc5TqMwxQ4yL6&#xA;e8nkzxx4pUxPXvNkkEEpDJKQprAp4wrTs0n2nPag2w9leLlkcmSo4+nd8JHn7/p7ra9WYioQBlP7&#xA;fkPu597JvLt1Hd6FYXMZXhLAjDgKKKjoB2A8MyMkhKRINhPhyh6ZCpDmEwyCuxV2KuxV2KuxVhXn&#xA;bz3c6feR6B5fh+u+Ybmg4U5LArCoLDuxG4HQDdtuuLn1BieGO8ne9l9kxyxObMeHDH7fx+wPPvMH&#xA;lfzF+nNI03U9Wkvdb1VucqcmdLeLkByG4H8xoqgDicwsmKfEATci9Jo9fg8LJPHjEcWP5yP4rnvu&#xA;zPyRq2uaRrd/5Y12drmG0AazvXqSQ3EqoJqxBVwe/GlMkNbHBLgyy9zpO1NPhzYo6jCOEy+qP493&#xA;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&#xA;Fdaep2Aja3WVa1cb19ts1WS7oudAbP8A/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1906.i402.009.P.m004.c23.Internet blocking isometric</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmpMM:DocumentID>xmp.did:45c4be64-0336-4c43-b19c-6a9ba4b9541e</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:45c4be64-0336-4c43-b19c-6a9ba4b9541e</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:12B3B8F49987E911AFB6F93710476849</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:12B3B8F49987E911AFB6F93710476849</stEvt:instanceID>
                  <stEvt:when>2019-06-05T16:58:11+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6C2673455E88E911B1B1B40AE5EB137C</stEvt:instanceID>
                  <stEvt:when>2019-06-06T16:23:28+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6D2673455E88E911B1B1B40AE5EB137C</stEvt:instanceID>
                  <stEvt:when>2019-06-06T17:40:37+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f9a52484-03f2-e646-a796-f96e82b06be2</stEvt:instanceID>
                  <stEvt:when>2021-07-29T02:01:30+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:45c4be64-0336-4c43-b19c-6a9ba4b9541e</stEvt:instanceID>
                  <stEvt:when>2021-07-29T02:42:22+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:750ae33f-dc57-4da9-a8a4-9fa07f2726b5</stRef:instanceID>
            <stRef:documentID>xmp.did:f9a52484-03f2-e646-a796-f96e82b06be2</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:12B3B8F49987E911AFB6F93710476849</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>400.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
350.64 320.86 mo
348.077 322.411 351.488 312.26 349.346 312.562 cv
349.237 312.569 349.102 312.595 348.991 312.608 cv
350.581 312.395 351.968 311.083 352.553 309 cv
359.332 308.073 li
356.529 317.396 352.944 319.789 350.64 320.86 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.521569 .662745 1 rgb
f
gsave
350.64 320.86 mo
348.077 322.411 351.488 312.26 349.346 312.562 cv
349.237 312.569 349.102 312.595 348.991 312.608 cv
350.581 312.395 351.968 311.083 352.553 309 cv
359.332 308.073 li
356.529 317.396 352.944 319.789 350.64 320.86 cv
cp
clp
352.553 309 mo
359.332 308.073 li
359.332 308.086 li
352.546 309.03 li
352.553 309 li
cp
f
352.546 309.03 mo
359.332 308.086 li
359.316 308.175 359.287 308.26 359.26 308.353 cv
352.477 309.289 li
352.501 309.194 352.523 309.115 352.546 309.03 cv
cp
f
352.477 309.289 mo
359.26 308.353 li
359.165 308.615 li
352.386 309.542 li
352.405 309.453 352.445 309.381 352.477 309.289 cv
cp
f
352.386 309.542 mo
359.165 308.615 li
359.076 308.862 li
352.274 309.795 li
352.386 309.542 li
cp
f
352.274 309.795 mo
359.076 308.862 li
359.034 308.96 358.987 309.033 358.945 309.115 cv
352.169 310.048 li
352.274 309.795 li
cp
f
352.169 310.048 mo
358.945 309.115 li
358.905 309.207 358.869 309.296 358.826 309.381 cv
352.04 310.308 li
352.073 310.236 352.116 310.147 352.169 310.048 cv
cp
f
352.04 310.308 mo
358.826 309.381 li
358.767 309.46 358.718 309.549 358.669 309.647 cv
351.873 310.568 li
351.939 310.495 351.984 310.403 352.04 310.308 cv
cp
f
351.873 310.568 mo
358.669 309.647 li
358.478 309.927 li
351.695 310.857 li
351.758 310.768 351.817 310.676 351.873 310.568 cv
cp
f
351.695 310.857 mo
358.478 309.927 li
358.416 310.035 358.337 310.134 358.255 310.236 cv
351.469 311.169 li
351.541 311.06 351.623 310.968 351.695 310.857 cv
cp
f
351.469 311.169 mo
358.255 310.236 li
358.159 310.347 358.048 310.469 357.929 310.568 cv
351.14 311.5 li
351.258 311.396 351.366 311.287 351.469 311.169 cv
cp
f
grestore
224.212 56.3033 mo
224.051 56.2084 li
223.834 56.1062 li
223.623 56.0206 li
223.41 55.9421 li
223.186 55.873 li
222.996 55.8271 li
222.95 55.8203 li
222.713 55.7777 li
222.618 55.7643 222.546 55.7581 222.447 55.7548 cv
222.345 55.7483 222.256 55.7483 222.155 55.7548 cv
222.043 55.7548 221.935 55.7581 221.819 55.7777 cv
221.8 55.7777 li
220.088 56.0206 218.385 56.2542 216.663 56.4877 cv
215.026 56.7144 li
214.997 56.7208 li
215.385 56.6681 215.799 56.6747 216.197 56.7601 cv
216.203 56.7601 li
216.614 56.8424 217.018 56.9966 217.422 57.2338 cv
390.121 156.932 li
396.898 156.005 li
224.212 56.3033 li
cp
f
399.993 161.838 mo
399.987 161.806 li
399.987 161.733 li
399.98 161.635 399.98 161.546 399.964 161.454 cv
399.951 161.313 399.941 161.158 399.928 161.013 cv
399.898 160.892 399.878 160.78 399.868 160.671 cv
399.836 160.547 li
399.829 160.455 li
399.799 160.353 399.757 160.244 399.717 160.133 cv
399.668 159.866 399.586 159.591 399.497 159.334 cv
399.448 159.186 399.379 159.058 399.32 158.913 cv
399.221 158.687 399.119 158.46 399.011 158.253 cv
398.942 158.125 li
398.853 157.96 398.751 157.806 398.656 157.661 cv
398.514 157.484 li
398.462 157.405 li
398.406 157.32 li
398.18 157.053 li
397.953 156.833 li
397.772 156.639 li
397.746 156.639 li
397.548 156.452 li
397.348 156.297 li
397.141 156.16 li
396.944 156.031 li
396.898 156.005 li
390.121 156.932 li
390.154 156.965 li
390.44 157.132 390.706 157.333 390.963 157.559 cv
390.976 157.579 li
391.235 157.806 391.466 158.066 391.673 158.348 cv
391.719 158.398 li
391.903 158.647 392.057 158.907 392.221 159.186 cv
392.333 159.393 392.435 159.62 392.534 159.853 cv
392.592 159.995 392.665 160.12 392.711 160.261 cv
392.813 160.54 392.895 160.819 392.948 161.112 cv
392.981 161.227 393.02 161.339 393.043 161.46 cv
393.073 161.618 li
393.132 161.96 393.177 162.321 393.197 162.673 cv
393.201 162.725 li
393.207 163.12 393.201 163.501 393.151 163.885 cv
393.151 163.935 li
393.112 164.326 393.037 164.714 392.928 165.099 cv
352.553 309 li
359.332 308.073 li
399.717 164.168 li
399.783 163.905 li
399.842 163.646 li
399.868 163.56 399.878 163.468 399.892 163.373 cv
399.901 163.287 399.934 163.192 399.934 163.094 cv
399.944 162.998 399.961 162.9 399.964 162.804 cv
399.971 162.706 399.98 162.601 399.987 162.505 cv
399.993 162.394 399.993 162.295 400 162.186 cv
400 162.065 399.993 161.953 399.993 161.838 cv
cp
f
390.121 156.932 mo
392.543 158.348 393.806 161.986 392.928 165.099 cv
352.553 309 li
351.676 312.115 349.01 313.496 346.592 312.089 cv
160.028 209.21 li
160.028 209.21 168.214 208.036 170.79 204.997 cv
211.445 60.316 li
212.319 57.2072 214.994 55.8334 217.422 57.2338 cv
390.121 156.932 li
cp
.764706 .87451 .956863 rgb
f
382.619 160.652 mo
384.929 161.979 386.112 165.433 385.281 168.375 cv
347.052 304.632 li
346.224 307.574 343.706 308.882 341.403 307.561 cv
177.882 213.15 li
175.585 211.825 174.392 208.365 175.224 205.424 cv
213.449 69.1626 li
214.274 66.2217 216.808 64.9133 219.099 66.241 cv
382.619 160.652 li
cp
.890196 .945098 .996078 rgb
f
372.422 161.894 mo
374.538 163.113 375.633 166.281 374.866 168.966 cv
339.829 293.834 li
339.079 296.525 336.769 297.734 334.656 296.512 cv
184.806 209.998 li
182.693 208.786 181.605 205.618 182.374 202.923 cv
217.393 78.0487 li
218.162 75.3538 220.485 74.1643 222.588 75.377 cv
372.422 161.894 li
cp
.521569 .662745 1 rgb
f
372.422 161.894 mo
374.538 163.113 375.633 166.281 374.866 168.966 cv
339.829 293.834 li
339.079 296.525 336.769 297.734 334.656 296.512 cv
184.806 209.998 li
182.693 208.786 181.605 205.618 182.374 202.923 cv
217.393 78.0487 li
218.162 75.3538 220.485 74.1643 222.588 75.377 cv
372.422 161.894 li
cp
.376471 .556863 .917647 rgb
f
374.866 168.966 mo
339.829 293.834 li
339.079 296.525 336.769 297.734 334.656 296.512 cv
184.806 209.998 li
183.936 209.492 183.245 208.638 182.785 207.632 cv
182.815 207.238 182.88 206.837 182.986 206.455 cv
218.392 80.2634 li
219.154 77.5424 221.507 76.3431 223.63 77.5624 cv
374.68 164.779 li
375.153 166.081 375.258 167.586 374.866 168.966 cv
cp
.521569 .662745 1 rgb
f
351.984 310.075 mo
351.961 318.648 li
351.958 319.569 351.343 320.502 350.138 321.195 cv
350.161 312.634 li
351.37 311.928 351.984 311.008 351.984 310.075 cv
cp
f
gsave
351.984 310.075 mo
351.961 318.648 li
351.958 319.569 351.343 320.502 350.138 321.195 cv
350.161 312.634 li
351.37 311.928 351.984 311.008 351.984 310.075 cv
cp
clp
351.984 310.075 mo
351.961 318.648 li
351.958 318.704 li
351.984 310.134 li
351.984 310.075 li
cp
f
351.984 310.134 mo
351.958 318.704 li
351.958 318.823 351.952 318.947 351.928 319.056 cv
351.952 310.495 li
351.968 310.367 351.978 310.249 351.984 310.134 cv
cp
f
351.952 310.495 mo
351.928 319.056 li
351.905 319.167 351.853 319.302 351.817 319.424 cv
351.84 310.847 li
351.889 310.735 351.928 310.607 351.952 310.495 cv
cp
f
351.84 310.847 mo
351.817 319.424 li
351.774 319.536 351.715 319.664 351.656 319.776 cv
351.676 311.215 li
351.741 311.09 351.794 310.975 351.84 310.847 cv
cp
f
351.676 311.215 mo
351.656 319.776 li
351.57 319.9 351.495 320.029 351.399 320.15 cv
351.426 311.577 li
351.514 311.461 351.613 311.327 351.676 311.215 cv
cp
f
351.426 311.577 mo
351.399 320.15 li
351.278 320.288 351.15 320.429 351.005 320.561 cv
351.035 312.01 li
351.186 311.869 351.298 311.728 351.426 311.577 cv
cp
f
351.035 312.01 mo
351.005 320.561 li
350.788 320.781 350.512 320.982 350.203 321.156 cv
350.236 312.595 li
350.545 312.408 350.802 312.207 351.035 312.01 cv
cp
f
350.236 312.595 mo
350.203 321.156 li
350.138 321.195 li
350.161 312.634 li
350.236 312.595 li
cp
f
grestore
236.489 378.685 mo
236.131 378.915 235.694 379.086 235.263 379.243 cv
235.102 379.303 234.938 379.342 234.771 379.388 cv
234.573 379.441 234.357 379.513 234.143 379.553 cv
233.896 379.612 233.64 379.644 233.393 379.677 cv
233.193 379.704 li
232.838 379.75 232.496 379.756 232.132 379.756 cv
231.967 379.756 li
231.602 379.756 231.258 379.75 230.906 379.704 cv
230.765 379.691 li
230.413 379.651 230.065 379.592 229.732 379.526 cv
229.575 379.473 li
229.273 379.401 228.983 379.316 228.697 379.211 cv
228.53 379.158 li
228.195 379.014 227.882 378.875 227.573 378.704 cv
51.8575 277.258 li
51.8379 285.825 li
227.544 387.275 li
227.843 387.426 228.132 387.584 228.455 387.703 cv
228.513 387.716 li
228.684 387.788 li
228.859 387.847 229.036 387.913 229.223 387.965 cv
229.315 387.985 229.414 388.011 229.516 388.031 cv
229.752 388.09 li
229.867 388.11 li
230.081 388.163 230.291 388.195 230.498 388.241 cv
230.725 388.254 li
230.899 388.274 li
231.11 388.294 li
231.316 388.314 231.524 388.327 231.718 388.334 cv
231.934 388.334 li
232.112 388.327 li
232.204 388.327 232.296 388.334 232.378 388.327 cv
232.618 388.321 232.848 388.307 233.088 388.281 cv
233.166 388.274 li
233.371 388.254 li
233.535 388.222 233.712 388.195 233.89 388.169 cv
234.11 388.11 li
234.343 388.07 234.567 388.011 234.771 387.946 cv
234.885 387.926 234.991 387.9 235.092 387.867 cv
235.224 387.814 li
235.671 387.656 236.102 387.485 236.47 387.262 cv
350.138 321.195 li
350.161 312.634 li
236.489 378.685 li
cp
f
350.138 307.475 mo
352.602 308.902 352.609 311.215 350.161 312.634 cv
236.489 378.685 li
234.041 380.124 230.048 380.131 227.573 378.704 cv
51.8575 277.258 li
49.3831 275.832 49.3831 273.512 51.8445 272.085 cv
165.509 206.032 li
167.961 204.605 171.95 204.605 174.405 206.032 cv
350.138 307.475 li
cp
.843137 .913725 1 rgb
f
318.333 123.668 mo
317.827 124.542 316.693 124.835 315.826 124.329 cv
287.965 107.953 li
287.094 107.434 286.805 106.307 287.314 105.433 cv
287.821 104.549 288.954 104.266 289.822 104.772 cv
317.679 121.148 li
318.556 121.664 318.849 122.797 318.333 123.668 cv
cp
.376471 .556863 .917647 rgb
f
289.822 104.772 mo
317.679 121.148 li
318.517 121.634 318.787 122.67 318.389 123.524 cv
317.936 123.629 317.449 123.576 317.022 123.33 cv
289.168 106.948 li
288.336 106.462 288.057 105.44 288.461 104.582 cv
288.911 104.473 289.401 104.526 289.822 104.772 cv
cp
.521569 .662745 1 rgb
f
141.523 249.821 mo
131.138 255.848 li
116.902 247.629 li
127.277 241.595 li
141.523 249.821 li
cp
.396078 .568627 .917647 rgb
f
168.799 233.965 mo
158.411 240.002 li
144.175 231.78 li
154.556 225.746 li
168.799 233.965 li
cp
f
155.161 241.895 mo
144.776 247.928 li
130.537 239.699 li
140.921 233.672 li
155.161 241.895 li
cp
f
187.813 233.965 mo
182.128 237.268 li
158.352 223.548 li
164.04 220.238 li
187.813 233.965 li
cp
f
215.273 249.821 mo
209.588 253.124 li
185.815 239.394 li
191.494 236.088 li
215.273 249.821 li
cp
f
297.646 297.373 mo
291.964 300.683 li
268.178 286.953 li
273.873 283.646 li
297.646 297.373 li
cp
f
187.11 244.54 mo
176.729 250.567 li
162.496 242.355 li
172.874 236.321 li
187.11 244.54 li
cp
f
173.475 252.47 mo
163.094 258.497 li
148.855 250.275 li
159.239 244.248 li
173.475 252.47 li
cp
f
205.414 255.102 mo
195.033 261.135 li
180.79 252.923 li
191.178 246.883 li
205.414 255.102 li
cp
f
159.834 260.396 mo
149.453 266.423 li
135.22 258.204 li
145.595 252.174 li
159.834 260.396 li
cp
f
242.736 265.664 mo
237.045 268.977 li
213.268 255.25 li
218.96 251.937 li
242.736 265.664 li
cp
f
191.773 263.032 mo
181.385 269.065 li
167.159 260.85 li
177.53 254.809 li
191.773 263.032 li
cp
f
223.706 265.664 mo
213.334 271.704 li
199.098 263.492 li
209.476 257.461 li
223.706 265.664 li
cp
f
147.34 267.659 mo
137.458 273.403 li
123.212 265.184 li
133.104 259.43 li
147.34 267.659 li
cp
f
178.138 270.958 mo
167.76 276.979 li
153.511 268.77 li
163.902 262.736 li
178.138 270.958 li
cp
f
210.071 273.597 mo
199.69 279.624 li
185.457 271.405 li
195.841 265.382 li
210.071 273.597 li
cp
f
242.03 276.243 mo
231.649 282.279 li
217.416 274.05 li
227.79 268.03 li
242.03 276.243 li
cp
f
270.196 281.523 mo
264.508 284.833 li
240.725 271.096 li
246.417 267.791 li
270.196 281.523 li
cp
f
196.436 281.523 mo
186.049 287.554 li
171.819 279.332 li
182.197 273.298 li
196.436 281.523 li
cp
f
228.388 284.172 mo
217.997 290.199 li
203.768 281.977 li
214.139 275.943 li
228.388 284.172 li
cp
f
260.331 286.811 mo
249.949 292.841 li
235.72 284.626 li
246.091 278.592 li
260.331 286.811 li
cp
f
214.754 292.092 mo
204.366 298.119 li
190.13 289.913 li
200.505 283.88 li
214.754 292.092 li
cp
f
246.696 294.734 mo
236.312 300.761 li
222.075 292.552 li
232.451 286.512 li
246.696 294.734 li
cp
f
233.052 302.661 mo
222.67 308.688 li
208.428 300.482 li
218.816 294.432 li
233.052 302.661 li
cp
f
264.991 305.31 mo
254.596 311.323 li
240.377 303.114 li
250.745 297.074 li
264.991 305.31 li
cp
f
251.356 313.229 mo
240.971 319.256 li
226.732 311.034 li
237.117 305.014 li
251.356 313.229 li
cp
f
283.312 315.881 mo
272.924 321.902 li
258.685 313.696 li
269.056 307.656 li
283.312 315.881 li
cp
f
316.381 319.167 mo
305.997 325.204 li
277.143 308.546 li
287.528 302.506 li
316.381 319.167 li
cp
f
240.515 321.442 mo
230.626 327.199 li
141.635 275.818 li
151.523 270.065 li
240.515 321.442 li
cp
f
269.661 323.795 mo
259.292 329.838 li
246.184 322.27 li
245.043 321.622 li
255.421 315.582 li
269.661 323.795 li
cp
f
258.31 331.721 mo
248.418 337.472 li
234.189 329.256 li
244.067 323.502 li
258.31 331.721 li
cp
f
276.608 342.287 mo
266.716 348.041 li
252.487 339.819 li
262.375 334.071 li
276.608 342.287 li
cp
f
129.025 257.077 mo
119.127 262.831 li
104.898 254.602 li
114.783 248.862 li
129.025 257.077 li
cp
f
302.74 327.097 mo
292.365 333.131 li
276.986 324.251 li
287.37 318.221 li
302.74 327.097 li
cp
f
289.098 335.021 mo
278.724 341.067 li
246.184 322.27 li
259.292 329.838 li
269.661 323.795 li
289.098 335.021 li
cp
f
278.629 297.373 mo
268.251 303.407 li
254.015 295.185 li
264.39 289.144 li
278.629 297.373 li
cp
f
325.096 313.229 mo
319.408 316.535 li
295.635 302.805 li
301.327 299.499 li
325.096 313.229 li
cp
f
141.523 249.121 mo
131.138 255.151 li
116.902 246.936 li
127.277 240.902 li
141.523 249.121 li
cp
.521569 .662745 1 rgb
f
168.799 233.268 mo
158.411 239.302 li
144.175 231.073 li
154.556 225.053 li
168.799 233.268 li
cp
f
155.161 241.195 mo
144.776 247.222 li
130.537 239.003 li
140.921 232.972 li
155.161 241.195 li
cp
f
187.813 233.268 mo
182.128 236.568 li
158.352 222.847 li
164.04 219.538 li
187.813 233.268 li
cp
f
215.273 249.121 mo
209.588 252.414 li
185.815 238.694 li
191.494 235.381 li
215.273 249.121 li
cp
f
297.646 296.68 mo
291.964 299.979 li
268.178 286.246 li
273.873 282.943 li
297.646 296.68 li
cp
f
187.11 243.84 mo
176.729 249.877 li
162.496 241.655 li
172.874 235.621 li
187.11 243.84 li
cp
f
173.475 251.77 mo
163.094 257.797 li
148.855 249.581 li
159.239 243.548 li
173.475 251.77 li
cp
f
205.414 254.409 mo
195.033 260.436 li
180.79 252.217 li
191.178 246.19 li
205.414 254.409 li
cp
f
159.834 259.69 mo
149.453 265.723 li
135.22 257.501 li
145.595 251.477 li
159.834 259.69 li
cp
f
242.736 264.971 mo
237.045 268.283 li
213.268 254.543 li
218.96 251.244 li
242.736 264.971 li
cp
f
191.773 262.329 mo
181.385 268.355 li
167.159 260.15 li
177.53 254.109 li
191.773 262.329 li
cp
f
223.706 264.971 mo
213.334 270.998 li
199.098 262.782 li
209.476 256.755 li
223.706 264.971 li
cp
f
147.34 266.956 mo
137.458 272.697 li
123.212 264.484 li
133.104 258.737 li
147.34 266.956 li
cp
f
178.138 270.258 mo
167.76 276.285 li
153.511 268.07 li
163.902 262.036 li
178.138 270.258 li
cp
f
210.071 272.904 mo
199.69 278.924 li
185.457 270.712 li
195.841 264.685 li
210.071 272.904 li
cp
f
242.03 275.552 mo
231.649 281.586 li
217.416 273.357 li
227.79 267.324 li
242.03 275.552 li
cp
f
270.196 280.827 mo
264.508 284.13 li
240.725 270.403 li
246.417 267.091 li
270.196 280.827 li
cp
f
196.436 280.827 mo
186.049 286.86 li
171.819 278.632 li
182.197 272.604 li
196.436 280.827 li
cp
f
228.388 283.479 mo
217.997 289.493 li
203.768 281.271 li
214.139 275.25 li
228.388 283.479 li
cp
f
260.331 286.111 mo
249.949 292.148 li
235.72 283.926 li
246.091 277.886 li
260.331 286.111 li
cp
f
214.754 291.399 mo
204.366 297.429 li
190.13 289.207 li
200.505 283.18 li
214.754 291.399 li
cp
f
246.696 294.034 mo
236.312 300.061 li
222.075 291.852 li
232.451 285.812 li
246.696 294.034 li
cp
f
233.052 301.967 mo
222.67 307.994 li
208.428 299.772 li
218.816 293.738 li
233.052 301.967 li
cp
f
264.991 304.606 mo
254.596 310.624 li
240.377 302.421 li
250.745 296.381 li
264.991 304.606 li
cp
f
251.356 312.53 mo
240.971 318.556 li
226.732 310.334 li
237.117 304.314 li
251.356 312.53 li
cp
f
283.312 315.175 mo
272.924 321.202 li
258.685 312.996 li
269.056 306.949 li
283.312 315.175 li
cp
f
316.381 318.461 mo
305.997 324.511 li
277.143 307.853 li
287.528 301.813 li
316.381 318.461 li
cp
f
240.515 320.742 mo
230.626 326.493 li
141.635 275.119 li
151.523 269.364 li
240.515 320.742 li
cp
f
269.661 323.104 mo
259.292 329.138 li
246.184 321.57 li
245.043 320.916 li
255.421 314.882 li
269.661 323.104 li
cp
f
258.31 331.025 mo
248.418 336.778 li
234.189 328.557 li
244.067 322.802 li
258.31 331.025 li
cp
f
276.608 341.586 mo
266.716 347.328 li
252.487 339.118 li
262.375 333.368 li
276.608 341.586 li
cp
f
129.025 256.384 mo
119.127 262.128 li
104.898 253.909 li
114.783 248.162 li
129.025 256.384 li
cp
f
302.74 326.404 mo
292.365 332.431 li
276.986 323.548 li
287.37 317.515 li
302.74 326.404 li
cp
f
289.098 334.311 mo
278.724 340.364 li
246.184 321.57 li
259.292 329.138 li
269.661 323.104 li
289.098 334.311 li
cp
f
278.629 296.68 mo
268.251 302.713 li
254.015 294.488 li
264.39 288.451 li
278.629 296.68 li
cp
f
325.096 312.53 mo
319.408 315.835 li
295.635 302.105 li
301.327 298.8 li
325.096 312.53 li
cp
f
189.782 311.034 mo
191.671 312.135 191.678 313.9 189.788 315.001 cv
165.197 329.292 li
163.324 330.384 160.258 330.384 158.378 329.292 cv
126.929 311.139 li
125.033 310.042 125.023 308.267 126.893 307.183 cv
151.491 292.891 li
153.383 291.786 156.44 291.786 158.346 292.891 cv
189.782 311.034 li
cp
.356863 .490196 .756863 rgb
f
189.788 315.001 mo
165.197 329.292 li
163.324 330.384 160.258 330.384 158.378 329.292 cv
126.929 311.139 li
126.429 310.863 126.081 310.528 125.838 310.177 cv
126.078 309.835 126.422 309.522 126.893 309.25 cv
151.491 294.958 li
153.383 293.86 156.44 293.86 158.346 294.958 cv
189.782 313.108 li
190.268 313.387 190.616 313.716 190.853 314.067 cv
190.616 314.402 190.268 314.721 189.788 315.001 cv
cp
.45098 .572549 .862745 rgb
f
327.246 329.73 mo
327.252 329.687 li
327.259 329.618 li
327.275 329.552 li
327.275 329.493 li
327.295 329.434 li
327.301 329.358 li
327.315 329.292 li
327.334 329.234 li
327.351 329.171 li
327.354 329.171 li
327.384 329.099 li
327.4 329.033 li
327.416 328.974 li
327.446 328.905 li
327.472 328.852 li
327.499 328.793 li
327.529 328.717 li
327.568 328.645 li
327.617 328.557 li
327.624 328.55 li
327.633 328.536 li
327.732 328.392 li
327.801 328.27 li
327.857 328.198 li
327.909 328.139 li
327.956 328.076 li
328.005 328.031 li
328.054 327.972 li
328.117 327.919 li
328.166 327.873 li
328.215 327.83 li
328.277 327.784 li
328.337 327.732 li
328.386 327.699 li
328.441 327.666 li
328.491 327.623 li
328.501 327.623 li
341.814 319.937 li
341.857 319.917 li
341.899 319.891 li
341.958 319.861 li
342.007 319.851 li
342.054 319.822 li
342.109 319.802 li
342.158 319.789 li
342.211 319.776 li
342.267 319.776 li
342.303 319.776 li
342.32 319.762 li
342.382 319.762 li
342.448 319.776 li
342.52 319.776 li
342.612 319.802 li
342.707 319.854 li
344.035 320.617 li
343.917 320.548 343.779 320.522 343.628 320.542 cv
343.473 320.548 343.312 320.604 343.141 320.709 cv
329.819 328.399 li
329.651 328.491 329.49 328.622 329.339 328.786 cv
329.178 328.944 329.057 329.132 328.938 329.319 cv
328.935 329.332 li
328.826 329.526 328.728 329.73 328.675 329.937 cv
328.668 329.937 li
328.612 330.153 328.57 330.357 328.57 330.551 cv
328.58 330.758 328.612 330.916 328.675 331.067 cv
328.675 331.074 li
328.731 331.192 328.833 331.304 328.938 331.363 cv
327.624 330.591 li
327.535 330.545 327.459 330.479 327.4 330.377 cv
327.354 330.305 li
327.318 330.226 li
327.301 330.16 li
327.288 330.091 li
327.275 330.038 li
327.268 329.979 li
327.252 329.917 li
327.246 329.858 li
327.246 329.792 li
327.246 329.73 li
cp
.843137 .913725 1 rgb
f
329.819 328.399 mo
329.129 328.793 328.57 329.759 328.57 330.551 cv
328.58 331.359 329.145 331.672 329.826 331.277 cv
343.141 323.591 li
343.838 323.19 344.39 322.224 344.39 321.422 cv
344.39 320.623 343.831 320.302 343.141 320.709 cv
329.819 328.399 li
cp
.678431 .827451 .917647 rgb
f
308.258 340.446 mo
308.264 340.381 li
308.271 340.321 li
308.271 340.265 li
308.278 340.199 li
308.287 340.134 li
308.304 340.075 li
308.317 339.999 li
308.333 339.94 li
308.353 339.887 li
308.353 339.881 li
308.369 339.799 li
308.389 339.739 li
308.418 339.687 li
308.448 339.618 li
308.481 339.559 li
308.498 339.506 li
308.53 339.437 li
308.566 339.358 li
308.609 339.273 li
308.619 339.266 li
308.632 339.25 li
308.724 339.099 li
308.81 338.984 li
308.866 338.905 li
308.912 338.859 li
308.951 338.797 li
309.007 338.74 li
309.056 338.688 li
309.105 338.632 li
309.164 338.586 li
309.22 338.53 li
309.276 338.494 li
309.332 338.445 li
309.391 338.422 li
309.434 338.379 li
309.493 338.336 li
309.51 338.33 li
322.813 330.643 li
322.852 330.627 li
322.911 330.6 li
322.954 330.571 li
323.006 330.551 li
323.059 330.538 li
323.108 330.525 li
323.164 330.505 li
323.207 330.499 li
323.272 330.485 li
323.309 330.485 li
323.322 330.485 li
323.375 330.485 li
323.443 330.485 li
323.522 330.492 li
323.604 330.512 li
323.713 330.558 li
325.02 331.333 li
324.913 331.268 324.787 331.231 324.636 331.254 cv
324.488 331.268 324.318 331.32 324.14 331.419 cv
310.827 339.105 li
310.65 339.19 310.486 339.339 310.338 339.5 cv
310.187 339.654 310.052 339.838 309.944 340.032 cv
309.944 340.039 li
309.825 340.239 309.743 340.44 309.674 340.647 cv
309.674 340.653 li
309.609 340.867 309.579 341.073 309.579 341.265 cv
309.579 341.465 309.609 341.632 309.674 341.774 cv
309.743 341.909 309.825 342.004 309.944 342.073 cv
308.619 341.314 li
308.534 341.261 308.458 341.186 308.395 341.09 cv
308.353 341.011 li
308.32 340.939 li
308.304 340.873 li
308.284 340.811 li
308.271 340.745 li
308.271 340.686 li
308.264 340.624 li
308.258 340.558 li
308.258 340.505 li
308.258 340.446 li
cp
.843137 .913725 1 rgb
f
310.827 339.105 mo
310.141 339.506 309.572 340.472 309.579 341.265 cv
309.579 342.066 310.147 342.378 310.834 341.987 cv
324.147 334.304 li
324.84 333.9 325.402 332.931 325.396 332.138 cv
325.396 331.34 324.834 331.018 324.14 331.419 cv
310.827 339.105 li
cp
.678431 .827451 .917647 rgb
f
323.937 296.134 mo
326.513 297.626 326.506 300.012 323.973 301.488 cv
321.409 302.973 317.308 302.973 314.735 301.488 cv
296.789 291.126 li
294.245 289.66 294.206 287.258 296.766 285.78 cv
299.303 284.307 303.446 284.307 305.993 285.78 cv
323.937 296.134 li
cp
.666667 .811765 .898039 rgb
f
323.973 301.488 mo
321.409 302.973 317.308 302.973 314.735 301.488 cv
296.789 291.126 li
295.944 290.64 295.408 290.038 295.11 289.421 cv
295.398 288.799 295.934 288.211 296.766 287.725 cv
299.303 286.246 303.446 286.246 305.993 287.725 cv
323.937 298.08 li
324.791 298.579 325.33 299.168 325.616 299.795 cv
325.33 300.413 324.804 301.008 323.973 301.488 cv
cp
.764706 .87451 .956863 rgb
f
205.355 227.553 mo
207.918 229.038 207.912 231.428 205.382 232.9 cv
202.822 234.385 198.714 234.385 196.144 232.9 cv
178.204 222.545 li
175.647 221.067 175.621 218.68 178.171 217.192 cv
180.708 215.717 184.852 215.717 187.406 217.192 cv
205.355 227.553 li
cp
.666667 .811765 .898039 rgb
f
205.382 232.9 mo
202.822 234.385 198.714 234.385 196.144 232.9 cv
178.204 222.545 li
177.346 222.052 176.811 221.458 176.528 220.833 cv
176.811 220.212 177.33 219.617 178.171 219.141 cv
180.708 217.665 184.852 217.665 187.406 219.141 cv
205.355 229.492 li
206.2 229.985 206.739 230.587 207.028 231.214 cv
206.749 231.825 206.213 232.42 205.382 232.9 cv
cp
.764706 .87451 .956863 rgb
f
359.175 172.647 mo
329.217 279.446 li
328.57 281.75 326.591 282.779 324.791 281.74 cv
196.62 207.737 li
195.874 207.304 195.289 206.577 194.888 205.713 cv
194.915 205.371 194.971 205.036 195.069 204.711 cv
225.345 96.78 li
226.006 94.447 228.01 93.4119 229.825 94.4602 cv
359.027 169.061 li
359.435 170.182 359.52 171.46 359.175 172.647 cv
cp
.843137 .913725 1 rgb
f
343.877 183.162 mo
334.288 217.313 li
334.084 218.053 333.463 218.378 332.871 218.053 cv
291.879 194.382 li
291.649 194.244 291.452 194.011 291.33 193.728 cv
291.34 193.629 291.36 193.518 291.393 193.403 cv
301.067 158.887 li
301.278 158.145 301.915 157.812 302.49 158.145 cv
343.831 182.016 li
343.949 182.367 343.989 182.782 343.877 183.162 cv
cp
.764706 .87451 .956863 rgb
f
329.69 226.226 mo
320.105 260.39 li
319.894 261.122 319.267 261.451 318.685 261.116 cv
277.696 237.448 li
277.462 237.307 277.272 237.08 277.143 236.807 cv
277.15 236.693 277.173 236.587 277.203 236.482 cv
286.881 201.957 li
287.094 201.211 287.741 200.876 288.316 201.218 cv
329.635 225.085 li
329.769 225.434 329.792 225.841 329.69 226.226 cv
cp
f
271.488 141.798 mo
261.898 175.959 li
261.688 176.696 261.06 177.021 260.482 176.696 cv
219.476 153.025 li
219.24 152.887 219.062 152.653 218.931 152.374 cv
218.941 152.265 218.96 152.16 218.977 152.052 cv
228.675 117.53 li
228.875 116.781 229.516 116.455 230.101 116.787 cv
271.435 140.659 li
271.563 141.003 271.583 141.418 271.488 141.798 cv
cp
f
257.301 184.862 mo
247.715 219.032 li
247.501 219.765 246.867 220.094 246.289 219.759 cv
205.283 196.097 li
205.046 195.949 204.862 195.723 204.737 195.443 cv
204.747 195.335 204.764 195.23 204.79 195.125 cv
214.481 160.599 li
214.688 159.853 215.329 159.525 215.907 159.853 cv
257.252 183.715 li
257.373 184.076 257.406 184.484 257.301 184.862 cv
cp
f
229.825 94.4602 mo
359.027 169.061 li
359.435 170.182 359.52 171.46 359.175 172.647 cv
356.842 180.994 li
223.341 103.921 li
225.345 96.78 li
226.006 94.447 228.01 93.4119 229.825 94.4602 cv
cp
.376471 .556863 .917647 rgb
f
347.331 171.145 mo
347.331 173.041 348.777 174.569 350.568 174.569 cv
352.366 174.569 353.818 173.041 353.818 171.145 cv
353.818 169.262 352.366 167.74 350.568 167.74 cv
348.777 167.74 347.331 169.262 347.331 171.145 cv
cp
.764706 .87451 .956863 rgb
f
339.464 166.962 mo
339.464 168.854 340.917 170.386 342.707 170.386 cv
344.492 170.386 345.948 168.854 345.948 166.962 cv
345.948 165.082 344.492 163.547 342.707 163.547 cv
340.917 163.547 339.464 165.082 339.464 166.962 cv
cp
f
331.607 162.522 mo
331.607 164.405 333.055 165.939 334.847 165.939 cv
336.641 165.939 338.087 164.405 338.087 162.522 cv
338.087 160.632 336.641 159.107 334.847 159.107 cv
333.055 159.107 331.607 160.632 331.607 162.522 cv
cp
f
274.478 207.563 mo
278.563 209.919 278.599 213.741 274.541 216.101 cv
264.738 221.792 li
260.679 224.155 254.081 224.149 249.996 221.786 cv
178.497 180.507 li
174.412 178.155 174.375 174.333 178.438 171.97 cv
188.237 166.271 li
192.302 163.915 198.894 163.922 202.982 166.285 cv
274.478 207.563 li
cp
.988235 .854902 .298039 rgb
f
175.414 176.203 mo
175.171 261.195 li
175.168 262.756 176.196 264.317 178.26 265.5 cv
178.497 180.507 li
176.439 179.324 175.411 177.757 175.414 176.203 cv
cp
.917647 .541176 .2 rgb
f
178.497 180.507 mo
178.26 265.5 li
249.756 306.778 li
249.996 221.786 li
178.497 180.507 li
cp
.996078 .8 .184314 rgb
f
277.561 211.868 mo
277.561 212.227 277.495 212.591 277.383 212.943 cv
277.354 213.045 li
277.239 213.373 277.065 213.702 276.854 214.021 cv
276.743 214.188 li
276.512 214.504 276.24 214.809 275.914 215.095 cv
275.697 215.292 275.425 215.473 275.165 215.654 cv
274.955 215.805 274.774 215.963 274.541 216.101 cv
264.738 221.792 li
264.113 222.157 263.414 222.443 262.687 222.696 cv
262.431 222.785 262.168 222.864 261.902 222.933 cv
261.557 223.038 261.211 223.127 260.853 223.199 cv
260.436 223.281 260.012 223.36 259.582 223.413 cv
259.48 223.426 259.385 223.449 259.286 223.456 cv
258.707 223.521 258.119 223.551 257.531 223.551 cv
257.436 223.557 257.344 223.557 257.248 223.557 cv
256.67 223.551 256.088 223.521 255.523 223.456 cv
255.26 223.429 li
254.692 223.36 254.133 223.265 253.584 223.14 cv
253.486 223.114 253.39 223.091 253.292 223.064 cv
252.792 222.946 252.313 222.795 251.839 222.624 cv
251.583 222.538 li
251.021 222.325 250.488 222.075 249.996 221.786 cv
249.756 306.778 li
250.222 307.051 250.732 307.291 251.261 307.502 cv
251.343 307.531 li
251.596 307.613 li
251.905 307.728 252.21 307.84 252.529 307.932 cv
252.7 307.978 252.874 308.014 253.048 308.057 cv
253.144 308.08 253.243 308.113 253.344 308.136 cv
253.436 308.152 253.528 308.182 253.621 308.201 cv
253.962 308.271 254.307 308.333 254.659 308.382 cv
254.78 308.399 254.905 308.408 255.027 308.422 cv
255.27 308.444 li
255.408 308.464 255.54 308.481 255.671 308.494 cv
256.009 308.524 256.351 308.54 256.696 308.546 cv
256.805 308.553 256.91 308.546 257.012 308.546 cv
257.104 308.546 257.189 308.546 257.282 308.546 cv
257.442 308.546 257.6 308.546 257.764 308.546 cv
258.149 308.53 258.536 308.504 258.918 308.464 cv
259.039 308.451 li
259.141 308.438 259.24 308.422 259.345 308.408 cv
259.647 308.366 259.95 308.333 260.245 308.277 cv
260.374 308.26 260.492 308.211 260.62 308.188 cv
260.975 308.116 261.32 308.027 261.665 307.932 cv
261.842 307.88 262.036 307.846 262.214 307.794 cv
262.441 307.692 li
263.17 307.436 263.87 307.153 264.498 306.788 cv
274.298 301.093 li
274.426 301.021 li
274.613 300.906 274.744 300.774 274.912 300.653 cv
275.178 300.469 275.458 300.288 275.674 300.088 cv
275.743 300.042 li
275.987 299.818 276.204 299.585 276.391 299.345 cv
276.499 299.184 li
276.621 299.01 li
276.68 298.914 276.753 298.819 276.808 298.724 cv
276.917 298.53 277.012 298.336 277.084 298.132 cv
277.11 298.044 li
277.143 297.928 li
277.186 297.797 277.229 297.676 277.252 297.544 cv
277.294 297.347 277.318 297.15 277.321 296.946 cv
277.324 296.857 li
277.534 222.775 li
277.561 211.957 li
277.561 211.868 li
cp
.917647 .541176 .2 rgb
f
205.247 160.872 mo
205.326 160.113 205.427 159.38 205.562 158.674 cv
205.579 158.578 205.602 158.48 205.621 158.387 cv
205.76 157.698 205.924 157.034 206.115 156.406 cv
206.151 156.297 206.187 156.196 206.219 156.09 cv
206.393 155.555 206.594 155.046 206.805 154.546 cv
206.861 154.421 206.906 154.29 206.965 154.171 cv
207.179 153.705 207.423 153.274 207.669 152.854 cv
207.744 152.729 207.81 152.587 207.886 152.463 cv
208.198 151.973 208.54 151.516 208.897 151.092 cv
208.993 150.977 209.095 150.872 209.19 150.764 cv
209.476 150.451 209.775 150.159 210.081 149.883 cv
210.196 149.788 210.311 149.682 210.429 149.583 cv
210.846 149.252 211.274 148.933 211.73 148.67 cv
211.362 148.884 210.994 149.101 210.626 149.311 cv
210.515 149.373 210.37 149.459 210.261 149.525 cv
210.074 149.633 li
204.38 152.939 li
203.926 153.209 203.498 153.521 203.085 153.856 cv
202.963 153.951 202.848 154.057 202.729 154.158 cv
202.424 154.428 202.132 154.724 201.856 155.026 cv
201.75 155.141 201.645 155.249 201.543 155.368 cv
201.198 155.782 200.866 156.209 200.564 156.682 cv
200.538 156.738 li
200.455 156.863 200.39 157.01 200.311 157.142 cv
200.097 157.5 199.884 157.859 199.696 158.25 cv
199.621 158.43 li
199.561 158.558 199.509 158.703 199.45 158.841 cv
199.338 159.091 199.22 159.344 199.121 159.613 cv
199.029 159.857 198.953 160.113 198.868 160.369 cv
198.835 160.471 198.799 160.567 198.77 160.671 cv
198.701 160.879 li
198.586 161.273 198.477 161.68 198.385 162.104 cv
198.342 162.279 198.309 162.469 198.273 162.65 cv
198.253 162.745 198.23 162.844 198.217 162.936 cv
198.194 163.044 198.171 163.146 198.152 163.255 cv
198.086 163.636 198.027 164.027 197.977 164.418 cv
197.948 164.665 197.925 164.914 197.905 165.167 cv
197.882 165.351 li
197.859 165.565 li
197.83 165.943 197.806 166.33 197.787 166.718 cv
197.77 167.103 197.764 167.494 197.761 167.885 cv
197.761 167.957 li
197.715 184.221 li
205.063 179.952 li
205.109 163.688 li
205.109 162.795 205.155 161.927 205.227 161.102 cv
205.247 160.872 li
cp
.996078 .8 .184314 rgb
f
264.228 192.233 mo
264.215 191.779 264.192 191.322 264.166 190.862 cv
264.153 190.662 264.133 190.455 264.117 190.248 cv
264.11 190.153 264.103 190.057 264.094 189.962 cv
264.081 189.807 264.07 189.643 264.054 189.489 cv
264.012 189.029 263.962 188.569 263.903 188.102 cv
263.844 187.629 263.772 187.156 263.699 186.686 cv
263.696 186.652 li
263.679 186.577 li
263.611 186.137 263.535 185.69 263.453 185.25 cv
263.361 184.76 263.262 184.27 263.154 183.777 cv
263.114 183.607 263.068 183.432 263.032 183.258 cv
263.009 183.16 262.986 183.054 262.96 182.946 cv
262.907 182.732 262.861 182.515 262.809 182.295 cv
262.68 181.792 262.552 181.296 262.414 180.797 cv
262.316 180.442 262.207 180.09 262.102 179.739 cv
262.03 179.485 li
261.974 179.301 li
261.826 178.815 261.669 178.325 261.508 177.839 cv
261.35 177.359 261.179 176.879 261.004 176.4 cv
260.906 176.127 li
260.837 175.946 li
260.722 175.634 260.607 175.325 260.489 175.019 cv
260.308 174.559 260.124 174.106 259.936 173.646 cv
259.805 173.327 259.667 173.011 259.529 172.702 cv
259.434 172.473 li
259.355 172.292 li
259.154 171.838 258.944 171.378 258.73 170.925 cv
258.5 170.425 258.261 169.932 258.017 169.443 cv
257.893 169.203 li
257.771 168.969 li
257.564 168.562 257.357 168.157 257.143 167.75 cv
256.88 167.264 256.601 166.787 256.329 166.301 cv
256.187 166.052 256.052 165.802 255.911 165.555 cv
255.855 165.46 255.803 165.364 255.747 165.269 cv
255.503 164.862 255.244 164.467 254.994 164.066 cv
254.613 163.442 254.232 162.824 253.831 162.213 cv
253.762 162.111 253.703 162.002 253.637 161.901 cv
253.059 161.046 252.467 160.198 251.859 159.374 cv
251.448 158.815 251.034 158.273 250.61 157.734 cv
250.262 157.287 249.904 156.85 249.545 156.419 cv
249.542 156.412 li
249.519 156.39 li
249.161 155.953 248.799 155.529 248.431 155.111 cv
248.07 154.697 247.702 154.29 247.33 153.892 cv
247.15 153.698 li
246.952 153.495 li
246.696 153.222 246.437 152.952 246.174 152.683 cv
245.779 152.282 245.385 151.884 244.981 151.506 cv
244.862 151.391 244.744 151.283 244.622 151.168 cv
244.524 151.072 244.422 150.977 244.32 150.888 cv
244.127 150.708 243.936 150.523 243.742 150.35 cv
243.328 149.975 242.91 149.607 242.483 149.252 cv
242.306 149.101 242.118 148.949 241.938 148.802 cv
241.836 148.723 241.741 148.64 241.639 148.562 cv
241.504 148.45 241.369 148.335 241.228 148.226 cv
240.821 147.905 240.406 147.586 239.989 147.277 cv
239.693 147.063 239.394 146.853 239.095 146.643 cv
238.908 146.511 li
238.763 146.409 li
238.362 146.136 237.965 145.874 237.564 145.614 cv
237.163 145.364 236.765 145.121 236.364 144.878 cv
236.272 144.826 236.18 144.772 236.088 144.717 cv
224.146 137.826 li
223.844 137.651 223.545 137.484 223.249 137.323 cv
222.861 137.116 222.473 136.915 222.088 136.721 cv
221.832 136.593 221.58 136.478 221.323 136.36 cv
221.178 136.294 li
220.945 136.182 li
220.564 136.015 220.193 135.857 219.815 135.709 cv
219.43 135.555 219.052 135.41 218.674 135.278 cv
218.474 135.21 li
218.316 135.157 li
218.06 135.072 217.8 134.983 217.541 134.907 cv
217.153 134.786 216.759 134.681 216.377 134.585 cv
216.193 134.536 216.013 134.5 215.828 134.464 cv
215.575 134.408 li
215.454 134.381 215.336 134.352 215.217 134.325 cv
214.803 134.243 214.389 134.178 213.982 134.125 cv
213.732 134.089 213.489 134.069 213.242 134.046 cv
212.973 134.023 li
212.726 133.994 li
212.276 133.961 211.832 133.951 211.399 133.951 cv
211.208 133.951 211.021 133.968 210.833 133.981 cv
210.682 133.981 210.534 133.994 210.386 134.001 cv
210.235 134.01 210.081 134.004 209.933 134.023 cv
209.378 134.069 208.835 134.148 208.306 134.257 cv
208.273 134.263 li
208.162 134.283 208.06 134.325 207.944 134.355 cv
207.399 134.48 206.85 134.615 206.335 134.799 cv
206.209 134.855 li
205.457 135.134 204.73 135.456 204.044 135.857 cv
203.065 136.426 202.085 136.994 201.106 137.563 cv
200.005 138.207 198.901 138.848 197.8 139.485 cv
197.435 139.702 197.064 139.912 196.696 140.126 cv
197.379 139.732 198.109 139.403 198.865 139.13 cv
199.417 138.926 199.992 138.766 200.58 138.631 cv
200.698 138.601 200.807 138.562 200.929 138.539 cv
201.612 138.401 202.319 138.315 203.038 138.266 cv
203.186 138.263 203.334 138.256 203.482 138.25 cv
204.182 138.22 204.895 138.233 205.625 138.292 cv
205.717 138.299 205.802 138.308 205.894 138.315 cv
206.656 138.391 207.432 138.506 208.224 138.673 cv
208.48 138.733 li
209.295 138.913 210.12 139.147 210.965 139.426 cv
211.129 139.482 li
212.013 139.784 212.907 140.146 213.821 140.56 cv
213.995 140.642 li
214.922 141.069 215.848 141.549 216.798 142.094 cv
228.737 148.992 li
229.693 149.544 230.64 150.146 231.57 150.793 cv
231.724 150.901 li
232.598 151.513 233.469 152.167 234.324 152.854 cv
234.554 153.047 li
235.378 153.718 236.187 154.428 236.985 155.171 cv
237.074 155.252 237.166 155.338 237.258 155.42 cv
238.06 156.173 238.842 156.965 239.611 157.77 cv
239.802 157.974 li
240.617 158.841 241.412 159.742 242.188 160.675 cv
242.217 160.711 li
243.006 161.664 243.772 162.644 244.518 163.652 cv
244.544 163.698 li
245.214 164.599 245.852 165.532 246.476 166.475 cv
246.87 167.067 247.242 167.678 247.613 168.289 cv
247.935 168.808 248.267 169.321 248.573 169.85 cv
248.704 170.08 248.836 170.313 248.967 170.547 cv
249.463 171.424 249.953 172.318 250.41 173.219 cv
250.551 173.488 li
251.096 174.572 251.612 175.67 252.099 176.778 cv
252.161 176.925 li
252.631 178.01 253.072 179.098 253.479 180.192 cv
253.561 180.419 li
253.972 181.536 254.353 182.66 254.692 183.791 cv
254.741 183.964 li
255.073 185.059 255.362 186.16 255.618 187.251 cv
255.681 187.51 li
256.197 189.781 256.558 192.042 256.746 194.26 cv
256.762 194.5 li
256.854 195.604 256.9 196.699 256.9 197.783 cv
256.841 218.355 li
264.189 214.086 li
264.248 193.511 li
264.251 193.087 264.245 192.663 264.228 192.233 cv
cp
f
228.737 148.992 mo
244.343 157.996 256.953 179.831 256.9 197.783 cv
256.841 218.355 li
247.521 212.975 li
247.567 196.719 li
247.607 182.535 238.428 165.723 227.071 159.17 cv
218.392 154.155 li
207.044 147.605 197.803 153.777 197.761 167.957 cv
197.715 184.221 li
188.398 178.842 li
188.454 158.266 li
188.503 140.317 201.195 133.09 216.798 142.094 cv
228.737 148.992 li
cp
.917647 .541176 .2 rgb
f
212.24 224.865 mo
208.724 222.838 205.854 224.461 205.841 228.513 cv
205.835 230.781 206.752 233.314 208.145 235.467 cv
205.769 254.54 li
218.523 261.898 li
216.266 240.156 li
217.678 239.621 218.592 238.145 218.595 235.88 cv
218.609 231.825 215.769 226.903 212.24 224.865 cv
cp
.176471 .113725 .121569 rgb
f
290.249 162.381 mo
289.91 162.249 289.572 162.131 289.243 162.032 cv
289.03 161.97 288.823 161.907 288.616 161.855 cv
288.422 161.808 288.231 161.769 288.037 161.736 cv
287.788 161.687 287.538 161.648 287.298 161.618 cv
287.147 161.605 287.002 161.585 286.861 161.575 cv
286.552 161.556 286.25 161.549 285.951 161.559 cv
285.76 161.562 li
285.395 161.582 285.044 161.628 284.708 161.694 cv
284.472 161.746 li
284.199 161.808 283.929 161.884 283.67 161.979 cv
283.45 162.055 li
283.131 162.183 282.819 162.328 282.52 162.499 cv
282.598 162.453 li
285.244 160.915 li
288.432 159.061 li
288.514 159.015 li
288.741 158.887 288.977 158.769 289.22 158.67 cv
289.355 158.621 li
289.608 158.536 li
289.73 158.493 289.841 158.443 289.97 158.407 cv
290.101 158.368 290.236 158.345 290.374 158.312 cv
290.627 158.256 li
290.762 158.224 li
291.041 158.174 291.324 158.141 291.616 158.121 cv
291.669 158.121 li
291.862 158.121 li
292.093 158.115 292.319 158.108 292.549 158.115 cv
292.786 158.138 li
292.927 158.148 293.065 158.164 293.206 158.181 cv
293.338 158.197 293.466 158.201 293.604 158.22 cv
293.716 158.24 293.831 158.273 293.949 158.296 cv
294.14 158.332 294.341 158.374 294.537 158.421 cv
294.643 158.443 294.741 158.46 294.843 158.486 cv
294.945 158.516 295.05 158.565 295.155 158.595 cv
295.484 158.69 295.813 158.805 296.144 158.933 cv
296.27 158.983 296.384 159.009 296.509 159.058 cv
296.72 159.167 li
297.298 159.413 297.883 159.695 298.481 160.044 cv
378.38 206.17 li
379.29 206.699 380.177 207.327 381.042 208.017 cv
381.314 208.233 381.57 208.483 381.837 208.72 cv
382.257 209.085 382.688 209.427 383.092 209.824 cv
383.283 210.008 383.461 210.215 383.641 210.406 cv
383.792 210.567 383.947 210.725 384.095 210.892 cv
384.272 211.086 384.463 211.267 384.634 211.467 cv
385.028 211.918 385.409 212.384 385.78 212.864 cv
385.912 213.031 386.033 213.209 386.165 213.38 cv
386.365 213.649 li
386.483 213.814 386.605 213.971 386.724 214.139 cv
387 214.537 387.275 214.944 387.542 215.358 cv
387.792 215.753 388.034 216.15 388.268 216.554 cv
388.331 216.659 li
388.393 216.781 li
388.58 217.1 388.761 217.422 388.935 217.747 cv
389.149 218.145 389.349 218.546 389.546 218.95 cv
389.72 219.311 389.888 219.683 390.049 220.051 cv
390.089 220.14 li
390.105 220.176 li
390.289 220.599 390.463 221.024 390.628 221.448 cv
390.799 221.894 390.956 222.338 391.107 222.782 cv
391.18 223.005 391.242 223.232 391.311 223.452 cv
391.341 223.557 391.374 223.659 391.406 223.764 cv
391.453 223.919 391.502 224.073 391.548 224.228 cv
391.695 224.77 391.831 225.312 391.945 225.851 cv
392.011 226.173 392.054 226.492 392.11 226.811 cv
392.143 226.998 392.175 227.179 392.205 227.363 cv
392.224 227.514 392.261 227.665 392.28 227.816 cv
392.402 228.753 392.468 229.676 392.464 230.583 cv
392.451 235.046 390.871 238.188 388.334 239.663 cv
382.418 243.101 li
384.959 241.625 386.536 238.484 386.546 234.021 cv
386.549 232.966 386.451 231.878 386.283 230.781 cv
386.26 230.616 386.227 230.449 386.198 230.281 cv
386.024 229.256 385.79 228.22 385.481 227.182 cv
385.455 227.09 385.429 226.998 385.403 226.909 cv
385.058 225.789 384.65 224.672 384.17 223.57 cv
384.134 223.498 li
383.651 222.388 383.092 221.293 382.484 220.228 cv
382.412 220.094 li
381.807 219.052 381.147 218.05 380.447 217.083 cv
380.256 216.824 li
379.602 215.95 378.909 215.125 378.189 214.339 cv
378.031 214.169 377.88 214.001 377.716 213.837 cv
377.151 213.242 376.552 212.703 375.948 212.18 cv
375.669 211.934 375.399 211.674 375.117 211.451 cv
374.255 210.764 373.375 210.13 372.468 209.607 cv
292.562 163.481 li
291.961 163.13 291.369 162.844 290.784 162.594 cv
290.604 162.515 290.426 162.45 290.249 162.381 cv
cp
.913725 .180392 .176471 rgb
f
292.562 163.481 mo
284.758 158.973 278.415 162.607 278.389 171.579 cv
278.363 180.547 284.666 191.484 292.47 195.992 cv
372.372 242.121 li
380.177 246.627 386.519 242.992 386.546 234.021 cv
386.573 225.053 380.273 214.116 372.468 209.607 cv
292.562 163.481 li
cp
.960784 .286275 .270588 rgb
f
358.334 211.549 mo
356.237 211.72 li
358.8 216.672 li
358.764 216.735 li
354.995 213.699 li
354.988 216.446 li
358.794 217.885 li
358.813 217.974 li
356.214 219.847 li
358.317 222.479 li
359.688 219.012 li
359.74 219.088 li
361.104 224.087 li
363.161 223.856 li
360.618 218.957 li
360.618 218.894 li
364.364 221.858 li
364.37 219.108 li
360.673 217.817 li
360.654 217.747 li
363.181 215.749 li
361.061 213.127 li
359.73 216.551 li
359.674 216.522 li
358.334 211.549 li
cp
1 1 1 rgb
f
343.434 202.946 mo
341.321 203.107 li
343.881 208.06 li
343.864 208.132 li
340.081 205.085 li
340.075 207.833 li
343.881 209.272 li
343.917 209.374 li
341.298 211.234 li
343.421 213.879 li
344.791 210.412 li
344.843 210.485 li
346.204 215.486 li
348.245 215.25 li
345.721 210.357 li
345.721 210.294 li
349.454 213.245 li
349.46 210.498 li
345.777 209.216 li
345.741 209.134 li
348.268 207.139 li
346.164 204.527 li
344.814 207.941 li
344.778 207.918 li
343.434 202.946 li
cp
f
328.521 194.336 mo
326.424 194.504 li
328.987 199.459 li
328.948 199.522 li
325.165 196.472 li
325.155 199.223 li
328.981 200.672 li
329.003 200.764 li
326.401 202.634 li
328.504 205.266 li
329.871 201.802 li
329.927 201.871 li
331.294 206.876 li
333.348 206.643 li
330.808 201.743 li
330.808 201.681 li
334.538 204.635 li
334.548 201.888 li
330.864 200.603 li
330.841 200.534 li
333.371 198.536 li
331.251 195.917 li
329.917 199.341 li
329.862 199.308 li
328.521 194.336 li
cp
f
313.598 185.726 mo
311.504 185.894 li
314.071 190.849 li
314.035 190.912 li
310.269 187.872 li
310.262 190.622 li
314.068 192.062 li
314.084 192.15 li
311.485 194.02 li
313.591 196.656 li
314.958 193.193 li
315.014 193.265 li
316.375 198.263 li
318.435 198.033 li
315.888 193.133 li
315.888 193.067 li
319.638 196.035 li
319.651 193.287 li
315.948 191.993 li
315.928 191.921 li
318.458 189.926 li
316.335 187.303 li
315.001 190.728 li
314.949 190.698 li
313.598 185.726 li
cp
f
298.704 177.123 mo
296.591 177.284 li
299.155 182.239 li
299.138 182.308 li
295.356 179.262 li
295.349 182.009 li
299.151 183.449 li
299.191 183.551 li
296.571 185.41 li
298.695 188.056 li
300.065 184.592 li
300.114 184.658 li
301.478 189.666 li
303.519 189.426 li
300.992 184.533 li
300.992 184.467 li
304.722 187.425 li
304.731 184.674 li
301.031 183.383 li
301.015 183.311 li
303.542 181.316 li
301.435 178.703 li
300.088 182.115 li
300.032 182.085 li
298.704 177.123 li
cp
f
198.401 106.028 mo
202.164 103.842 li
211.06 97.5298 li
207.301 99.7114 li
198.401 106.028 li
cp
.913725 .180392 .176471 rgb
f
222.562 112.801 mo
226.322 110.615 li
216.64 93.5763 li
212.881 95.7583 li
222.562 112.801 li
cp
f
197.774 69.1924 mo
201.536 67.0038 li
195.562 70.2538 li
191.803 72.4391 li
197.774 69.1924 li
cp
.6 .180392 .168627 rgb
f
207.061 85.5282 mo
210.82 83.3462 li
201.536 67.0038 li
197.774 69.1924 li
207.061 85.5282 li
cp
.913725 .180392 .176471 rgb
f
212.881 95.7583 mo
216.64 93.5763 li
225.924 86.9839 li
222.168 89.1692 li
212.881 95.7583 li
cp
f
222.168 89.1692 mo
225.924 86.9839 li
219.726 77.0266 li
215.963 79.2119 li
222.168 89.1692 li
cp
f
215.963 79.2119 mo
207.061 85.5282 li
197.774 69.1924 li
191.803 72.4391 li
201.484 89.4784 li
192.197 96.0704 li
198.401 106.028 li
207.301 99.7114 li
216.588 116.051 li
222.562 112.801 li
212.881 95.7583 li
222.168 89.1692 li
215.963 79.2119 li
cp
.960784 .286275 .270588 rgb
f
119.755 377.6 mo
119.988 377.64 131.773 377.272 129.154 381.38 cv
127.448 384.028 125.085 384.495 123.32 384.548 cv
121.553 384.593 118.332 383.64 117.537 384.12 cv
116.728 384.593 112.742 387.177 110.455 384.587 cv
109.988 384.061 109.686 382.549 109.988 381.583 cv
110.287 380.61 118.454 377.364 119.755 377.6 cv
cp
.356863 .690196 1 rgb
f
129.154 381.38 mo
127.448 384.028 125.085 384.495 123.32 384.548 cv
121.553 384.593 118.332 383.64 117.537 384.12 cv
116.728 384.593 112.742 387.177 110.455 384.587 cv
110.202 384.298 109.995 383.726 109.913 383.102 cv
111.516 385.304 115.43 384.699 116.515 383.969 cv
117.75 383.161 119.541 382.74 121.079 383.042 cv
122.621 383.332 125.976 382.977 127.655 381.465 cv
128.667 380.552 128.611 379.493 128.418 378.81 cv
129.452 379.369 129.912 380.177 129.154 381.38 cv
cp
.239216 .576471 1 rgb
f
136.705 385.271 mo
145.161 384.153 154.037 385.54 150.754 389.865 cv
148.625 392.671 145.631 393.125 143.386 393.151 cv
141.142 393.177 137.031 392.106 136.015 392.605 cv
135.01 393.105 129.975 395.793 127.024 393 cv
126.422 392.428 125.496 389.963 125.867 388.938 cv
126.229 387.919 135.043 385.488 136.705 385.271 cv
cp
.356863 .690196 1 rgb
f
111.122 288.891 mo
111.122 288.891 104.76 301.287 111.348 318.418 cv
111.348 318.418 116.4 332.884 115.285 337.725 cv
113.951 343.535 111.979 341.896 110.557 361.12 cv
109.305 378.093 109.387 375.412 109.666 381.649 cv
109.755 383.627 117.701 385.31 118.982 380.341 cv
122.246 367.643 130.146 341.08 128.7 325.701 cv
127.251 310.334 126.331 295.957 126.331 295.957 cv
126.331 295.957 116.176 293.265 111.122 288.891 cv
cp
.133333 .227451 .478431 rgb
f
118.743 296.065 mo
118.743 296.065 115 309.486 124.963 324.051 cv
124.963 324.051 132.469 340.436 131.438 345.924 cv
130.379 351.606 128.549 351.133 126.6 368.504 cv
125.368 379.54 124.583 382.333 125.456 389.431 cv
125.785 392.066 135.9 392.31 136.488 388.609 cv
138.539 375.714 148.184 347.978 146.735 332.605 cv
145.289 317.235 142.197 299.927 142.197 299.927 cv
142.197 299.927 125.427 299.789 118.743 296.065 cv
cp
.172549 .266667 .505882 rgb
f
150.754 389.865 mo
148.625 392.671 145.631 393.125 143.386 393.151 cv
141.142 393.177 137.031 392.106 136.015 392.605 cv
135.01 393.105 129.975 395.793 127.024 393 cv
126.692 392.691 126.183 391.725 126.058 391.061 cv
128.115 393.427 133.347 393.197 134.724 392.434 cv
136.281 391.587 138.549 391.18 140.514 391.521 cv
142.476 391.856 146.742 391.521 148.852 389.937 cv
150.126 388.977 150.508 387.111 150.245 386.375 cv
151.569 386.979 151.704 388.609 150.754 389.865 cv
cp
.239216 .576471 1 rgb
f
146.735 332.605 mo
148.184 347.978 138.539 375.714 136.488 388.609 cv
136.222 390.279 134.007 391.14 131.631 391.35 cv
135.861 379.967 142.384 346.719 143.291 341.984 cv
144.293 336.726 146.255 317.173 138.71 314.386 cv
131.171 311.596 124.448 302.122 124.448 302.122 cv
134.165 299.499 li
138.641 299.89 142.197 299.927 142.197 299.927 cv
142.197 299.927 145.289 317.235 146.735 332.605 cv
cp
.133333 .227451 .478431 rgb
f
157.888 234.123 mo
157.888 234.123 163.932 229.568 167.754 231.674 cv
171.579 233.781 171.839 234.776 169.778 235.224 cv
167.705 235.657 162.187 237.004 162.956 237.566 cv
163.735 238.132 165.782 238.375 165.322 239.082 cv
164.849 239.788 158.753 238.868 158.753 238.868 cv
155.371 235.707 li
157.888 234.123 li
cp
1 .666667 .513726 rgb
f
115.387 244.425 mo
115.387 244.425 108.25 244.133 108.214 251.382 cv
108.181 259.069 123.366 256.269 123.366 256.269 cv
123.366 256.269 136.515 254.948 140.583 253.268 cv
145.996 251.037 159.893 239.867 159.893 239.867 cv
159.893 239.867 158.828 235.414 155.756 234.32 cv
155.756 234.32 142.601 243.285 137.563 244.366 cv
132.078 245.536 116.593 244.159 115.387 244.425 cv
cp
.101961 .721569 .760784 rgb
f
142.387 261.126 mo
142.387 261.126 144.132 252.963 130.472 248.06 cv
116.81 243.16 108.398 243.347 108.22 250.961 cv
108.043 258.585 111.582 268.75 112.075 272.187 cv
112.466 274.905 115.128 277.291 111.815 285.194 cv
108.552 293.019 103.981 299.549 125.052 303.834 cv
128.766 304.583 145.111 306.085 143.12 297.317 cv
140.633 286.357 140.81 270.193 142.387 261.126 cv
cp
.282353 .843137 .964706 rgb
f
129.719 239.348 mo
129.719 239.348 128.296 245.129 131.109 248.638 cv
132.637 250.537 126.564 252.516 121.664 250.015 cv
121.664 250.015 121.233 240.137 117.605 236.693 cv
129.719 239.348 li
cp
1 .666667 .513726 rgb
f
129.38 243.495 mo
129.38 243.495 125.933 242.949 123.915 241.895 cv
123.698 242.039 li
122.594 243.63 li
121.95 242.71 li
121.95 242.71 123.068 248.727 130.337 247.425 cv
130.337 247.425 129.594 245.838 129.38 243.495 cv
cp
.968627 .623529 .486275 rgb
f
130.747 217.727 mo
130.747 217.727 135.447 218.792 136.564 226.065 cv
137.632 232.956 139.794 238.911 136.387 241.895 cv
132.929 244.922 120.202 244.142 116.031 235.352 cv
111.858 226.564 118.03 213.728 130.747 217.727 cv
cp
1 .666667 .513726 rgb
f
138.112 225.023 mo
138.017 226.124 137.412 228.411 135.18 229.328 cv
132.059 230.609 128.355 230.459 128.023 232.565 cv
127.681 234.675 125.749 237.136 132.38 248.812 cv
134.464 252.463 119.768 254.98 114.629 247.609 cv
112.943 245.201 110.619 229.916 114.737 221.06 cv
114.737 221.06 118.201 214.313 126.429 215.486 cv
126.429 215.486 138.884 216.354 138.112 225.023 cv
cp
.227451 .145098 .156863 rgb
f
125.282 237.806 mo
126.81 239.282 128.828 239.604 129.814 238.526 cv
130.796 237.448 130.35 235.375 128.828 233.893 cv
127.303 232.42 125.276 232.095 124.3 233.173 cv
123.327 234.254 123.771 236.325 125.282 237.806 cv
cp
1 .666667 .513726 rgb
f
171.789 287.626 mo
171.789 287.626 179.078 289.66 181.875 286.312 cv
184.658 282.957 184.543 281.925 182.453 282.273 cv
180.367 282.618 174.74 283.377 175.253 282.572 cv
175.773 281.767 177.583 280.787 176.897 280.304 cv
176.206 279.818 170.876 282.894 170.876 282.894 cv
168.868 287.077 li
171.789 287.626 li
cp
f
140.981 255.421 mo
140.981 255.421 137.044 249.495 131.362 254.126 cv
125.348 259.029 136.374 269.42 136.374 269.42 cv
136.374 269.42 145.059 279.131 148.726 281.323 cv
153.613 284.228 170.435 288.234 170.435 288.234 cv
170.435 288.234 173.288 284.524 172.355 281.343 cv
172.355 281.343 157.698 276.532 153.925 273.183 cv
149.821 269.535 141.881 256.22 140.981 255.421 cv
cp
.101961 .721569 .760784 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (1906.i402.009.P.m004.c23.Internet blocking isometric-10.eps)
%%CreationDate: 7/29/2021 2:42 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6BldNLFuD=P4$rt@+sqVfMV!H#?dpeP-q\7G2'pYEH?&_&.#L9PKS=9I8Bq/,PL!D&hQ"0>#XT:<f58!n#?g6PHLgFua$5#u
%HuZO&J+WHXj*uH].+'S0F12%Voqq\_c,P/%LHke.?h]%PS_^7+=3%ohLT@3AQ`%m9X0]-F`s9Y_B4!3]]jDg4^0SHiIp"E'@s)a0
%r9N@cKB;OIm5Ih5a.L*!5?N>TI!W:b?_e]0T`9jtr0Ob`X%!*h9R-R$q-en^Xj56sB,YX`mLOgHEr=%6dXRkdk7=W&qe,)ibOb\m
%U]:0)9qOUF9`!<)ABB=7`4f@+p7E`"O,L2BDjD1EkPWTDd&R')q54U^pg8sJ:Ont_Y>Y7ZV>hD.&-&+N*ROh6B(<W'ZgE7Z5J)VV
%"TH]iQXA\jNZ07M#dO?]aUdah#Cnq1:=9QB*hOE):ObR?FMZ>ha49.j_=DtB$YrIs40eat3rK$NJ(5XJeY:&Dk8bW_>p&'$9oX7<
%4"7T"d=`MRV#@MH<kn")If3aGYH-dAl;Z@6l08#ErI;75%M?T7!rm4ZYWDa+dJeFWHm5Z_Z@.)4[lS1C*Ie"4_3-^nBMRd+V8\M=
%e$lCL[Y'VO0!K)-15u5"]8OQCbP*OR;(Eaara^0Dj7-KUUY5H$QrLu?mC:l9\uhqh_<]g`$*nHUj@U1E5XB*sXQI^7D8/<kJ%L4&
%Km#*Ko]O^%]jWR,[j_/]1k;,PqS0'1-iIkV5!NBpBud@Ql.NP@;djj`I>+kRIC/b8p^ko(L4B0-SVNt`<"=rGb$TpRTt`Gt(FLsH
%!e1"6\G]h8#_YG<_fu$fo$bd7MtY1UT,q@04?n.5r5g%P4P`)J]ir)$5?]Z6NskgMVi)pU/Pj]B4[/hTrTj'geT*Y>43RSd:Tkr<
%lK?^nm^l3!K&24N?WXl&a/<eOm4H&%rSR!L5R%'sn`/kS[uIorHZ*s=Jo+L_Fo:X9oWS,kDt<eFHs5\<!fVSVoZQOXpgcd[gYIPB
%bCep(o!D2]Y0nuj0?^f("%b=SScAXX1u#/sC"#CJeedH%#,=E=kYo[rGO;P8*UTD?lMRhQcS6?XDF3mHo&*pUmHO3&h>Zj%bL;BU
%GDdQ(Nt4;EM8/d<NW2It_CogeN:YTadJ$-nT'`^RK?Xobp;XlC*Ik3kC?eIZNt:J*3\b"1mC,H4al^=Cc)Y3<N@V]pIsn*:q!.h:
%lf3WrZboOdN4`u>D1D:fp$2M/q<CGIrRENCDJG3_s4$4'i*4ISI=DFDp1F?'#mlMk(]3BriG9PWSj3ck]R%%L=j[Xlb?"efpf"fV
%`qS%sTAAEpj/\==_KS9f/s#,K`^epp*drOl^@pf6Ip?7#Cd)e;IF7Jcm6?+"l!d.DKZeYC481G9bEu^RE*3_A2i&h61g.oHs5?0n
%#FUY1rQ9VBS9Y&4@+E2_ci<Crpt$be\&B.#b0b4`A"S7[4BsK;V>^3=h(JZpTBiXoZ2qB\Ie)i2]DNH"K],_+s.;rRJ!p;hX7N3q
%h#:qFq:_1YZi/^f:RrR,]Xmr0NrJ.uqbq2;3a_:C6HWT*^0c98k2a$D^:VF&=74IC\Y2^A8;6j9qbR3!(B;#Fdsj=Cf=%];D\rHL
%?Y6S;8c.NYpga4$H_A-"ZhRJJ0G[GRZp"Z`5:u*ZMa+U6ILapd3A.nAYF1<La$:?iLZ!&*KMg>+&sr@jl<ue:52'eRl*;J6s7dgU
%$*<fjAe"ruM>P$3f8ajZ32dQHeO97f%DLuu&&stJ8b7I=(Y_1,@XLUSRo@COnb4>Ar"`MXDJl0)+^0UYPV4!I=ZlN'g$7m1<_)'9
%m61<*om"L+Ie34s<kG/;o,ih-1qR(ii7#oVB:_9Xls'#H]<(tTC`gujDU!"hb\Up(4#>XG$cq"hS0/<RA?'SJi0)>2OF>t(>>q$J
%f#U=DSoZ[^j")(obk_gn]$/BEB%AcESsf8(fhmfC9XeWbF_92\Z_!TXm?r*UaX%:ifeK1(_ee$Ak9F)Q$/TtFU2(+hUmXs'D#+WX
%3gc=0cYRo>e$DaH@!:&[):P^U[@N`YbcGGh4YuC/Z_JSfQu:0Mh9;s5Aj%s9f`:RCp<qt=e#h<1T@rk\VIqeMbL@&77m3Fuh3qK%
%R9@k[H=k_aZ[OSilLBhtf$$2#b^*mP1UEY^+:hj54e=CaRSD-(L,5<jg%<Lc+2V?14Cbr[S";DNB/VoZl'Y71KY@#&`cPuS4m+6=
%CjK^B1Rih!Hg1'Zl.0Zsc;'n_oZX1F2Z43\dc24oD:s$$ZP-t04gXB5hW*S]W5g]k>;PS*4)nl`1UE[@ou#H[O(V.qB%D$HilnK:
%Aj%(u*l;604Cbr[S"?r"B/VoZl.`K-q([DffmXL=S[/]:Aihg'=XJS'Hg1'Zl.0Zsc7>F<oZX1F2Z43\dc24oXkE?:=#dPNR8)#q
%^k]7k*m^3kc)g*p_O4QQb^*mP%qeBqSh]&i=jK*_1UE[@ousKZcAm35A%FP(ShgggAj%s9fin=cp<qt=dr!c[RPPCc2EeD2R8#o!
%^%?QhFDEctk8;K\H=kX4l/UahW5g]k>;PS*a)GYA1UEZalA)U1*m^3kc)0YD_jO6FD#+7d[';XR`hmrH':1ibk\+c$Njs3@e[0h[
%8_3#<d3sc`B3mamlFZQN3CRrMeMFD#m2ljO7m3Fuh3qKmM2F*qSsf8qX<5`JH9>]K27&n''k_,A1[E^rr=J\Niu-=Jg%:f534%k;
%:#DO:_Z4PT8S#!LcBl[0\s)VJR;CJ=]/]EFR6TS_5L6ls1Ol"lo7o:=NNX)Pfp3N`$-X`A(8bl$M$(UOrOkePZajT.ds'g#F'@SI
%Ve83l+ac<TCVY]MfJ!@gWlq7`eAE-h*+\>LEsa0k#=O'W*&@-OR:"j&?fsF6ETYk/^]"dnSSO31:7#(r-(BZEeW]='`)9ij:^u/L
%*<'C/ehaeL"1OlN'PD;HF6a@B;L>#DI#'k\RKCA`Z#4e"@B?WNGVF$RI[&NR34%j2Z0=87EG!ZUS,Ntmg=ZOc7uaL2+C/jR23V]j
%67deO3t_2O`j4!ZN$<<IbfmE^`3\WC`L1Ab4F?5D%rPl?Sh]&iB?s_=1XDY<p?d+ur/0mcCd3a/c<5oYZ^mNOb\Up(q\q6D3GWSG
%[PP7\_rr/kVKt@7\i%6odg'N74nJ!mHMl\Zf&IXsXa0W1;E4:7R:ji.qn[-Na"sSsoB\KNE9>h0c^oFUKA0LhB2#erfk!o5S9ahP
%ZY*M9KA':cB2#esf5m,6bcbZ.4nItE[Ab4nQu:0PkA8&(?dJXrk1:,Y;a$^,h3q]sR>*N4T)&%!83Jc`hgjD*.=s@^SXJlhChI@,
%horO=3?NT[[PP8g+A9WmSMBa&ru%CkVfg<JHfj!;c[KgPlg]quei\<)%\J%?bd1rRrSTTbiu-=JH1maO54e-/BA]:nc_^MO2Z4T#
%krC2?B%&Q*T)F@!Zi(?#m@;Ea1Y\>NI[EfFE[i.1&?W>k''j>i=[SI<D,?WhigEHsJP4>bgG>1f\b$,0S$TB<U9/X=/;-[.)QY1$
%7:XeSf@JlffU5CY>l$'XHHt69\b++BB>_^4CjuP!4/Z?0b][U,F3=0.g/O,G9Xj09F3=1"Y@i;I$cb'0r=,.]S-:l.gR6`DLi@0X
%X^i"r2&&TseKc4PCX,*B4/D%B.%^8,?24&^q)@p0R8;-qn]Yg!"(jWmm*3atB!sM%SXJk`^hi1=]:%?tb][U,1UI#hR-gE^0f.RP
%g!7Pb*o+b]4CbrSc`V=]a3:l&SimJ&1UI#hR-gE30f.RPg!0ZiKA0LhB2#esflMbcbd1rRrBWHi[71L//$XDYfkfHTHK*fcM9[O1
%7U/"bs"JN[R9SR">L2OS1UisdousN[d$Au?A%FP,T(><]DEW(,fcK_B2V-n+e#dohS1?Adm$VM44Sus3XN*,o>P%2A$@:jf1XDY<
%p4M+%O(V.qk1Of0ousaTSim>@c-5n<RB8Dh'_KUcB4a4]gR6ao#0_7NJtACtb\TMZ)NgSa,07bM;t6B69/[Th$>5@##sfLJYFi[2
%O\mHC/e'`qlT6ie3W+/7ehaYH4gT#73#HED9Z/)9?RjCc:;[$-9m\c<chr(NcZe<nF27CkT4e0$+g*tt,F)+99htDJ(ig)BOYg?2
%2=rXGSfN[+_F'i!H8Db='<e"FSS)7loBHkEeM/C5RgRGW6FDPB*j.IE@0T",Hr%:'.:eWS2EeD2%q3reg$n+B_>/S?g%;?D_io_(
%9ri;)s0;2<hJGK=JM%je[k-X`:U6m7S>-'.@oL_`q=I_Be*?XSfad'<g'I]QoQgE"l_D.kVruRI1P-gDT>!BNH?n4nY^c<=Zd/dS
%EqOVUkiMACFah'a@D$u9o6rq"cQCm0cd#=QR*,I*P\/kBs2<-`s5B/+]\IB(pZ9bkrlq,UispP/L[RuK2"W^Ic\k87D.0l.bY>5^
%p#P;;iBP&&J,&m8!2TTI`>c'VoWg,@VnY:L]f97;SU\%0D`cs>5CK[7p'q"DF<1__qmS5m45O1Io&i4hT)@X<i2AO.CjCJY])VWd
%I!%mt]et7bHFj#KaaBnfN8![5gHX=P>ocM;-7(cm;q:o,s#PXZZB@F:q1"FMIemW$HM47[38:"\Aq.M]0?]!+hAC`%];4C_45&%W
%H?6OoY7H)^R^BW:aXeGPn,BuR]?rHLdsq1!%.Nrhd9c.C]u_DOSp@_)s,KQiK7T&PJ':W,pIVVk:WgqZ@Xn4M@!/6.EKc[e+5[?3
%$G.*ekJrAPa;04@UV%W5qr3s3NtQ;J[F=SeMgfZSKY3"#[%5+(n'p7Sgp@RihYQiRNq1km?[r+-qsWL2S/ptb4ruU'h2\Pe00]DE
%[61s6fl+=[^D"'SRB&&K4/Va2)UnT@adCd;R;7TMDRKN<h2OC*Du0>J>Ub-BV<Y3(iNN-*kO3:F5\^&+(nXeYetqDQI=0m>W>DTo
%kMMp"2i[N#6eq[gmm``g2YlY5icKD;,qPP#%rn?"EkdN]*3RSRHVMf^#b@r=m`b^E-cV;gmC?)0K"?O,l#UVVqT$S$7nmh`^,TK4
%4[$M=\[q2-g$uoLI'n2.ULO,uG3c_!=e;]i(MEW#(C+L8g,O:iEdkS^3]gKQWS)^W5.eS]Rf@H=k^k=[`llj&f>l(`]uBF0_=?d,
%[?"[r2V*)aSMWklqKP"TgV1De$Ztd&a,R:!4R2(:KMT55i**ER;k&1)]rB`5Sh6"P=e<;Fk0pIbjic-'g$83re`+X"5L('Pn*Q`#
%?gf*'T>)J6;@'_Nh)<l<k_kYDMri@@Mri^DioT]%h^QH<SGL>dD%E/?NnT5\&"bLE7Y?.]@[u>YcJC.%=Iu(e:A=c[qe#B9WpR6Q
%d2#p__=nc/-Z.==o94#GDA.8H<7KiC$7<;s7OMu=kpHa8ElC-#m<Y8lNbGPB$81Im7cROEXjG@is6dMfT&tP&qqp\r^<?1f5CAfI
%LbGA1It)cdFF6jD3W&+mGM,6e*iQc9r>fSd"DW9P%tIG:Bd_*;^!6.p\30Y6'3cOET5AJ:Z]jG@;$W^HSmIp/pUOX*0Fb@5e!Id'
%Q\573e`)P#N+\J0c2*.gC3B$LbO`07g5o@5cbDN95>PXH^$Ua<h;n\2fNRT\M]\W,imYJR[dLYrZ'F\=VpE,g3&o9Ur7BK`=mK\s
%lbkL+BUHu<oDM+I^#doVkMs2q60/ZSDsitZHRC?7HiLX]`h+A1I/T,tJWF0cp'4-GCQ55;W,@6+J,9*/J".LNSmtZiT!\ZHp2@#+
%'9$GVr=``ca1n]N:LN9KgL_Me+.UbCq<XI!dDj%00+X@=]@ZG<h1PZi`q*U#pda@iDfH]lC48?iP&6.tbDFf1Keh-oXWpVqTg&KK
%LM>=ahUaDfai=>XYMA(if/gRi:=8nU])#+3qSQK<buWlnAaOsef)E8K%m0CS5tLqO^Q2ajkiL0oe$lB;2:ua"GQP&9CKd:3g7"V8
%nFb7=^lqL=Ibm;7h.Gg4CYI/G=WSQ!h%s9)gXS&#a`R`/oOh[Z6rt?jJH,NAp%+q;a,A>B\!u^]rT4=@?<gd>=-rN]M']cMH=--5
%+"hP^0"KWSm8)R[rk-^?j_F8Zc'o_S+B1nA[/JtSo]NQ_p/<cX:B'6he[WJ_pfAKrR\t@Ec*3sD1_$3QIHjaDk6F(q9T*MpDlm`b
%BJ/[A!pp_>:\G9fn9]+ro3RsR>t^G7k!R=k,s=7KQ$-5'FDE/Z<<cdiNd$\&f\2@ni=bKP]sQmi@:4Bl[9!0[m9K#uZs2U'/^KJR
%DU_I"I6-Z1e\1)<C]!ZogL9Jgm4DYZ?[R"M0!Wku[MjUE1a+l^D9'oC]=c\e'?A&FaZ*L1hsT<4]<+4]bt.02LB$\DcM$-::$GB9
%>k#-LlrVW2QH*q;&$BFAbZN2Y8R9NBf@OMZa9SV)30r/Qff_N6bC0p%o;Zf'Bbr_^Xg@or<K0fKG)fAmRtS+QB<m^QhmD_Hh=9_o
%Fjj^Gm,[qXs#QIj++ChCoa[3Ul;8c$A%L>r'4t=:g9hB>\RqXM]-diqn#p,!gh?HGm)m#s)P&gPENK+G1<R%5#Kr;M9SYI;C&i?_
%Xc=O&?HJAXm&Yt(?+,<`)7/bY_764Vg[XJ(kJIncEUhIM\8cl:$lckCMAu?%7_>S=-eGbWoX*KYT'P+$Ne3@qr@VmrYEu/"="W@A
%+E?d3Ze"u#4KdugO0=uk83irAgn=>eP8c>"pLNP/]fA.2ffQ]uqf/Bpdl5>%$Ii\"Z]!H69_ta=3buY3AT_r\T3@H1q[cl5>4f.l
%UXe*FeB+aq5r!.Qm+F7C#S#P=F*%l!!t0Fu5/:krf,C6o>;j0*Fk(<%e`n-#jAG7#0HZMN2O`_VhZ&Y#STTqBS#PkbAuAjR]oA@8
%I648,9Jr(#EF^Mc>2,_oRolh-g+L%=^C!U<))Bd1r)Cl"PMN9!%^e:.CAFjJhF6$V^0U-n?Q>(7H'`4em>':a+AFLQ]>9Imc/)\F
%m9[2'\<0l@qM(F+)7<beLj+9RCUJrR_m'pKjOnP%iV+,FI/i@OT)-%n5>RlcqL2jY$McLPKek(RT2.,hede0s2jONC"O#@%HIr/D
%<P+5=YmG+<nGSW(f[03ar*<D$eeRkUg4$-'Nt!IV0Ijims2XE_jm)K_C/F3Ua=M/`ip$'RT21f#OT$$=UHL=_D]ZA"O3q=JJ=?N1
%P^c-QnZ?0#Iu=a=\,I6Elm?'YHW?)d#BSX/s+j?YO@WG34#o@CC[CR9]-`KL0PEXUk6#3%#uS@PqR+jsg6c>%CGrJ\jhW=]D6>V@
%XgQt?o5+1QYT>`q(pom'RDFcjY^r\U:!\m4%qhB%1KX$^D>EI1H1JFgmHhQ%K)W\toY5m&r(HqY:[Koc\$ZR4NQtRCn_otk[%@3Y
%o7MZ'&fo_cIk9=cf')3shu*-3]H)[53SJ)^==gg*1Y%CL]Xri75[1X2?,<AE$U:48:JS'.8KE$[\bO?60#"+`e@';0)mn^Xm2oWQ
%;ml!Om/['$p%klhX'_+qr:mG^gpYs<MoKQL@WP_[c&=@SZc0-:<_&(S-.]eMSHW'c;u3&f.5$CpndL"q\p+'u[:nI^^>GL#?d=IH
%qsQ??h&>8H`tsYtFp]&+7uPBDn/(?o'7GcQWVn(@h.!aRrajJ@g^+t.n`.PE6G';;5&n0qiaBmCHOhcP>GHiL?$>t5?0o9mLS#Z:
%7<XlG(k5]&fCmT\lh0e;TgS]iMi4@&OkI$]aUZm-d4"ITm[ma^qQDL0&(g"M_`hNa]%mHI=RjC9^P)l4j)06)[^BDur5U=Q9PsX3
%l']l$eha_uO/Ml1iuV"=f=15a>r@o4f,ee2YB^pJ>Fr'WHb\GtdiuGfqY'^JGk^%Yn_rc6[Qcb$G3X+^P``1c)K*`no9V"LJIB1S
%DAu[-Y:2&@]IhhA?h;HJ2>/AK]H=`]Du3$f6K$"+^1p:%lMR-KU&BN%Ugdb+f6ljRgd>j`hb.UVYm_99Ib_.D?-^uF,Q'M.&@omc
%@-]Ycpr@RpLTcc)qZj^Zf+$ipTZ<(im?.rckNffjDiumY8)_Lr8@(tPN@pT2UsbrTCHH1W51+9fZ:'2k2K.V)^E0$H4LulCk&Z]U
%pAV\i>V78@fT+SS(3f]?(Mb8,qE'(nOJKL#J%`c#\&j!r2E(5`8UYu6mY><E*:A]^YE+1D$2:.dRQc>n'#o:)OI'0"`#D4FrLG7f
%dGeDR*+[5eSVLo8`\dG#.AOPLYQ%X-j8!"k\GL4<]:sS_UN5s1H[VdjrF.creBV??b=t[]efG2X\s=sOV&S3M:NoTq?SB`4/DmX+
%cTZ$*"sMsjJSq!6Xc_IN@CL.$)t4\YrVU?<aT7lijp$0P3`bL.rI7O<cdc)Gc-XI9HFpT[ni@lm-!/q!L:tO\HLhucX1g\B9APuA
%D![jt&-$A6UbuX7pT,m8RqhD(N"je"D,'rYns@n99jQIk+*tL1=CSIJp@R;$eI#[Pb2_CZ?RGf;s52^``W*]gJ,KQN<>SFp?2XY>
%eFJ+:BmAXP3aWo!n4`k-'SuXa#u,f3e%Ur>rC8,D,Ok8f;,T?DG0Z2YP#.5>c?3Q$=jTg<M[8solVINLKN^%qVi)?]A//dQS4\M2
%bO_nQ?S&_[:TZM/oZU+5q-SG]'fu1);WoQr+1#oPs!n7'684El;n1g,VpFg"/^0WGb98KU>u&I%ds`91=FB7i1HQm#[lA36X_#Q6
%C^G;I_-5G;^t>2SM?@PJN_>;]Y3pPI>/F*0c7aA*pN=N%r]T5:E+@WlTjWifqG=:`#p`G#&O=BGYtDg`:q6Zc($_p/4/R65Y`XgG
%!]1XqW49f&U<pL6>CV051d3Hs&>%Uo<PiTjP`lZX_%RDbGB,-H0f_7Rns`GSnGga3pH_aPmZTlBK7*<"qg,Q[LR3,W?ja*eZZWLJ
%\G/LLLD5u_CQ/k%E4f_o$(>u3CqdH5pf,SeRGN!(X5Go-'"3cs;A%8%is!@c1$GCUZ3f79bLt&T?)b_TN/7Vj)Pl99CZhc.AUB*o
%nRsTqUie5X4jgMoQ_WK4*=2)AXZ6b+?';%h.Hm^oNP:ImQR3gD#@h_]&#S_KSa[3(N$a2fqBF+jdGrVV2G*4B2S5]9Z1u#jD<":(
%9a>aBKgCod'<n:0''iq1p=d8d46>$,lm'>@PuVK[66!D_O;=%.*XubG\.3/X1HHN9I1j3PQo;2I;ouU@N-@k/@9RB/k]!Wo("?,2
%_qMWoDplA^,jXB?;6U`ZA)-GBBK2L"GrXQL3DeL!VsA0)jdm:Li!ELq(!uX,p76?;p(_*!KAP\;7meU$(jA/9a/r&Cg5m,74WY&E
%PI:s5UFSBkS9!h_]1TQ=c*]3QPlW5e'!b(qemi368p4?$(fOJtd]NXYP2N$'/,)C;g@8Qu>YK=OO(OlkNb5UR3h0`oY!Vh7F3il[
%56MoC%(U&pg)6>ra,S^%ir/Y:qe2qp,3*O_jL-QsC%#6g'\qpCBJc3sFYk%cdD<3(l3tg?24j".-S8(.JM)[:hD[K_OCSYKG"h.Q
%M8AI'SP7sZ-g,T%FGWe:GVk^\g,bPE^?AtY<MQ@;a>+YIZ8N2LjtF1]OP=.):BtCa/M8-@lU;'=7)#p#=Pu!ar[B-.6X7_gR*?]D
%@/b27<';MJ[G(fo7eJE`]/kFc]XK=f6^/[-JT4,nUjC"pJ$b9lZDM$u_+<_']i8N_fPul]/O$L$VKPKno6fIS6FJ#lV03IX1_hC,
%6/N.^K+Z.c_'U/M_D[G+(q6W![roe#"q=<>K6X&N^d@c$K;Mp38tg6R-b.:cb60_P*#/lb-mTEl(i5\$6rDksAH#iP]i;O^-o!1g
%9,,b&WZ\H5m=Y/L.;jfh,;r7uWOUpfg6/gOahIMbg>(Eq,6hhEm9hV)\P3^Vocg'P:+.s3,Wj!`bdDrFFUFi)0rPdYQ5+/E;$skt
%f.o/``Z";CYl.?FOKAFFV]``mr'3K4A$HFH]JZ[]h"/=0#b=:16G^VT[m8\9a!h?B\2qVKLq@?MR/6mOh5=jA#iI=rE<aZQ[Y)-A
%Zq[66CD(K=?&"7%OJd2a2BI]PUkEfdHTr4@O<Pahd!_@"'*)AfDGqJ6%,uFAd*^]CU$\"*`ftH.Kq?M3LKZ%OUe,FY`.?-<ZZZ$W
%KJo:WKX:"3(nUrg9B11;l^9EB"Z4LQ@]Y3bp]uGena,>V0mmCM0sjU!dEsR[leChO*AKBc,hWikbM^>c>j@#J=J=QPQ+GTX8`M$a
%K[pUfiKP#.`&RuQBq$'7M/kDSj-`;f%4mYLZiN(UCd^P8KRLEA`B]b.TL@QG@+.KcnEU?kMf<T+joH;m(=:Ki-P4-XK*E]*.?n"L
%P#K!TX-M"r>bZbZOO+IKPnk62D$(7^@T3[@B%B\\YtpdTiaYk?Ubkne<FKNN'aBU,a!M!#TKd?b;8:Z265`+Ebeg#g$CcRiBE;;?
%P$c+j$nYqQ8K,'eB)uL"dY5\([:SCp__a9K<Wjcs:LLg6P_+b'4$9lZJ-@Ur%b'W\<#JIX8Rjh=((n62Gbm\k#D3"TB]O27$EbDM
%"bS6<!GsSl5`!8Y2N"%lM4RLJL9_T)EK8TXfXALj8A()p920d#"PT9QK"(/oDVJ2YWCER!D287IieJ"#NC01i7+u;s&Qsqp+/4;-
%FjLO;#bf.qh9"7MF*ds3Z7oriDqXnkVr1kLXm9>8]t8.=35uja;p[r$Kl&^&po8-\(N+"BbD[/ig]k29N\2deQG<XW/D$\W1GaQ9
%@C%\S3e?)[Z\#pV<bcl"IZ-'"AB=uP%r&+L5IGY)6F_jnb'D`6,mN+`)?^IGU`\NgnI<GHDge]Y<jFoP!n0Cf>I!!%Q*hig*K(eg
%#LX@g>-D;>[8[?Icn@8A,4uuoP3s3s7QtFCe$$0+R0Y(C,Vn!hVK<u44"=g/5oI"W#f\V=h7@s9^8et[JrYF6$4MZ_EFbAN+OfQ+
%.P*qZ3KWO4[e1P;2G(BL-VJ6*k2u;,``RX:co.)rN@>0b2Z6dpm(rnX.9PeS@=nSGUPd3I9Ob0^m]c$loT7XIKgOP"b(P-LdPtI3
%m)g.1'c^CdWg,n.:,u?!M;AC@VJ;B])J5C3@W]KAKG--FLP`=Z\Z6MR_/%e9aWf<?G*WjoYqp&q`LZ"RNSY+<.Hm=5/K''@6tC*+
%mRa9t$;J+u(EMi`%+_A:$QDbAV"C`TJAj>oKj'Glim.'N1ekee'eR)]UZ*F).tmt(c4h0<SPk9l@H\WCEKdl,J@W-_[P)7A<kQu/
%[7eAWA"2RlD%l;]0g/47$7;.L3e\/P=__XXP7abtoB6$0fHfWT_&6k5W=a4*LYfQ*FJedU>&@EbLr'G$L+eE'JA,BVSehTUBL@e@
%m62fsS"_2*ToG1=2L2tOi>NBlr"iEp8&jO]J@7SUhIhC6k"BnDs*.)F.MNV#B,TTm"Qa&B[-Q.@e$8!UKFNpEf*3ScG$T\ufs"2!
%l2m_QOWO34"fk?!qV6dkMRqV0E&$)IAAt"'\N7>+Rd*D;GgK/bX+%0f:u+>>>*3)(VAj3c0FKar0\nXVl&p8<SSD+.m%QV4*MZd(
%g'#&t?5jEJ@oI%to'][8rc*]e$?bBQm?C'.[Qr8NG"KZ(\#\>Om0Z3PoHo!^!8EMg(Au2!bDPr95iXQj.SO@FZ!Ec(r*C'2f:hcJ
%i)Tb%L/*)c'HlXD+kP5GpGf;_0lY"Ph/ihk5rQiNXcjfLA+F(e$&!I1[5:=Z=dVVuZ,fP'ppRQ*#21E(Z&he%GW^9W%q2V[(,c`H
%EP"=48iiu+.u1K=W"-&>Z``-8O09^)8_G"KC3A`0(@T.XF]UI\DHZ-,?_o2g$O!Q$p$GG2?*7-hPY"[K7!NPW7K?@I0:ms\V<SMQ
%U+W#J@SPs,b&jt7#Y8ufA%VY00_;Q?36'Z%_ZkWW1`kK@$Hk'/cpU@DHjD7^S7hR*"9hTEj<9]iFT<.LTLGiWW\'FU95WY7!kY9X
%5YW0F`H/<K>_-lCjC#btE,LGfjqoW6'93W-[Q\4'gGk^),=gKIJHhYY4D[co")[R5AfDa!(=%f.UDPof@<!m&B]\V3/VE."SXAN.
%XQXN6cZ&#.X,;8'?MpC3!hrc!D(W#E2ZC--HjCCf*jm6KQ.N9![>`_BJ<Q1EgpdSI/mfU6l*^R%^H3dNrNu)%\dKFc'Y\KY>Q.0:
%7r!lrO(Q"@0c!8u#$^uIPE!+^\o9%5PM!*_i0e@g_=.`sJf;)b`odsC`9AbgpJ8(bcL;J]fcLMM/DH)(KN^[=3#DqRXp'`*$=`1W
%'Fqr2`OIf``A^r=VURqb2$gX@X.7ehK;m9L>g,hM'SZh:bPAbTc4;ptgIlM\5I1KS4JUo0695>'Zt3g-9m'7E#.[-.K8`MN/clRF
%K3>7k9a)maJOSuqQlt>4#$?d7/JS.39H/1CAJ9QE>2tmU<iE16@'C5>h_P+OR27D3ahb#b`Z)*5@AA&oe""@@!i\1]^4pVWCiifT
%Kdih8KC_U\NA@!e/itTKXW7/-%;rXB`F67X%[F?p_0I%IOK'Kc.Z%4]n<MU9M5FKJ#a4j#@cEiB#&bs649gNuPus1c$U,0Eie&Lb
%Bt\SrM+9RCH-2-%a#tp=Oc8J+TirNl%3mulYBZ!@X)SJ-?]Em00EaIr5"P,9K*g>3_g)\Jjf3Ho,_!86Gg`"^77D<Rds2^Sc,.>e
%]mrl;7::e/6aT4!/28'\4SAK4G4"Oaj;nB]6J5UZl19-Z)oVVm2EK;O9",,c2X)3I-m:<>,;r;Oe)N&1jLueoTm+'jRR$*QZ;#B'
%L6$4^7bY:+I4K.+GT;OF7TtSQfo[=-P(WHhHEs@IZr,.W8m^Y@Y5eV[[%SOrU8j@3JM!o9%^mI]C1Jk5]"Nc7A<"N4n*i:BAY$+:
%A[<UE<[8ViQ"l7/5c>ZGje.3f,oW;H<b3X:MSkMo];Rh9jtr#Cg<M$3dKnE7]gd'6^tr+Qa$D*mUieA\?0SU<=hF'Y`jf,f)-iG%
%(^][5@t_Tb8(-hfXBI$Z<$c=,?jSo3n>2Qgb:^sJf^/$>,b(TP,b&("&9aR:dE'q`[j".ZXgY@NB#^A"La_b6/?sru3m[>(''cN>
%,A[Gj#A.+U#8sR>_5mo<Fh!KDMtE^[)a2SEg>Tn?1(_-8J/,Bc9\`<&P0KJ1K.^OIVal0^@-4Hfc>c-/NXI<B>Mr&bN9aEP4E0U\
%'tbaQcBJSTJsIZ``$$qfUrX[G$Y%3[h@t>b\;(luJPAH)I"26<3'i,&a;bOp&K<UsQojC@/@TI/F:p.A"&>Ku::h6L).s!l4ub';
%Jp:$u;OT%r?IBs'qhGeXi6UKYhY!MY^IafN;*17T!@Q67`*5])Y1N,(R.h:)Q"H[0b+VV!e?F[1Dpo!@T==iYRn\n0>nmd7I<JgZ
%LN;SUB%+c7i^T:(g0uVnmdoo[OZuO3%+W/#>dlsrR2%Qi#G>kEhAEnb5a-fn+]_d39Ym;]Y-rqVY0b+jYBH3;BA"&'_3dS1KDKpb
%rX[#jSO!(_oL\[5('`N,F;CG7O_%A3MGBqKUn9Luf&#5[#=\`"eNSM`'!Sd)f8qr-AD#1\5SO)OfuPr%iLGE92XNu-OpFM(854JA
%[HWC\SrC'Od=[i],&!X_nZFD3a[Xm%4BF%X+SPm/NSHc%`Y',`YRJOWEN,"oal0ej<=#u!>dhF]qkl29@$Lf(/d2d^\`@3)PEi+`
%ibPGgL8c`/BGV#03FP[2e/hR^Hj2+bH4ObJY&=P`qo>/`.uf1HJX*Z/2TUW9fNj$aFonqSHil>HklT]n<A8LH*R5Y.0YhFX*SH,8
%:)I#J!o%T@!a8Oa9U(e?(t<V@MWp*64Dt4*j_PugjJ&===,Zdg[8D)S;/TXX#u%&d`\@adR0>%:"=TXiiM>X_pf-P&U/mg%QUBt$
%YJMrC(DE2q)+eKcO==9?]Q^%FJ[mXuWOV+Ye\LC]:.u<b1P8iK#_9X12ai1A42r.3I;oGum<5^4'WPCW,78C&]=\;Nlc)nr$%mFK
%CjZZjV6oo:0B)#^^J>L):H2.F_nkQ#5fjJFTM4T%Bu9OtC\oZ#/-L@<ICuq%$q`q]qGP1Xjhf#<BODkS8*m^d>k@9.aYsARoY*>T
%\8esJXDV\GI]KoaWRQCCdh*BY7M.M:cT77*PKK%T59n's$Jg_/kLYMd&Q@,''Ws,&<PUhN>1FNd?>76tND.2a29JJCD[E\iaNX`>
%-/D6,S@Gm`MR=T]G?.rg`F_KqEh,-)K_QsLP`7H8'GGU+@FeID(FYN*7(uWC'J;C-R#!X'oG:SrNi#4b(P=*aqDRN)4IH4ZK"/Yn
%PNhK7\WJ1OppOlWm<KlenhhSiMM6rkJ(A^ESXf'+Zcfu%]0fIg$G:aPfG17B#ftTBgYBmSadV9VY8PX)f%i(A@3Wu)qJfmN4//9=
%Pfq%cSS5r2:Ou7*%Abbm.ZR<1fNYFRNSPPR?pGF^)MQG$Q.`k+_VUNBP<8S6Ca..nIT,Di.$G)-.?!QFn,ODKRrjPoj3$4mfRFK;
%ej'j][&'*g4PRl+P7AF4-;e5%!1V+C@>9@AgGrsgLPM@HI3o7F6q_GY6HbJR[*pUe6ZNT]7`i$OmC:6R#RtkiFCdUQC(;(8?j;WO
%!61<a:;>`RKZ8:DaBV,nI0Z@,Vr9KnLAdT95MO9cU77Z1<b&&Xb9rojqI:0A7`A$7r:9+?m`",qa(o7tLRdmu>AApl_`bYM\2Gk/
%GU3tB:)q:5&8G3f\:oRRg2Nh`IR.,,,W#s@RK==J_E85[Sj@ZRSjDh)\CNb[+/:ALbZqeP..\no*"o>'!"DHAd<<;O!A&1J$>kN,
%Fn7m.k+K)9#=Lo+a-p%;[4u\#9/an]Su^aZ87*UOTSLY&kcs,t!(6I.Qe.9uXX)`\BN%`g,sAq.5SF&_)(+]cWpNbc,H]]u_(5d-
%]IG:d[g3b8&n1tWUi56grI@11A4NLN\*E5/An(pSb#,Z=5embO[^OAJ=feO"I,TgIk"+gjmb&UcO"VgdhqJ^r:8*&1R_s^g_F*a.
%VVG=Cn_28(%0E7^7lYa,`ms\-)G*HXf][1pWk<24^:-sijn0\eL%%f7Q%0hbd3.bN,?:4\[+/$RQ#t[,4\DK(72@uT`?b,')b7Li
%*9GtYSI93EmU(2a&^c<lh/0`4lP[<84b\t)*loU%0YEX\oRrc0o(P!UMj#'B(EYHP%M?$9gakSO\@ii:DKdLM1lL:7$KeJp1!#6]
%'e3`RCH/D$4T1K9Y8kaAGF7Jc],GXfo"$ek1DO448e2Ynbc5*Q[;Ph9e8t#=dmen;=;VB;I5+=lhKE"jcB-^H*uuV>%a@=^S)I2L
%MS'G]:US&/&TiC1r]r_6W7Sid"KfGAT:cMUpGS1X6Ni^(E*89JQ:;K2o(T-0LfF(FqW96dc:d&p'6ssuV/8?/0Ue5+]\&SukhdHu
%7NN2aHo4d]^haiZn1p42O.NRa-r!1_WbL:0`AEF`;Wo5-BX8crCQnP,%AYlgOQDYF-P;0;#5BP%"Nl"kLk`uB%Rd%ee0pOI6ENB\
%V^>Ot==g`tPR73\2AS^[;mo+`<%l`3^/Z_iGR1HC1C.9iZ*ELD(Hi=(j79KTLngreVV@blDo4h(ZJe'>[3\D9Zc/TI=a&kIf-o?L
%\e_:kNo16O+qd]rPa.A)OM@]e&>/^@,pBQacLS0C"`X62V0lss;Btb'/`6-$A%(n%.TqTjml5R6H,iY,^-<ZD\sSs!p+.[>[ST_R
%ol/(&;F-1^D)j[<<>?-p(Q/qI$e]RTeF-1>0q?90"p)4R%V60I_OH?D*4iVJ]Fm1/!.0a5q\R,U$Uk]T>5=n^DM%k9Z7[X&_mAgi
%K0*&a;r@`gHY0F$5<t3\?NfbqR"-66g`sEEN9q6b5"5M.KJ17]M#>)4A<p;ce:\Yul3",8hT6L0@2\6)]PQ8]cZm'E/?`-L@>XJ2
%63$r:E9i/6*fGS[X6YB016m8.A^Xf9HQF4ON>]-o`(6u'(0Qt1qY/$ga\ECXrbZi$M_cP-W=K_B>NK*Xe<6JDE:g94!eX_s?e$u7
%K9t^6jR6rD+V`*uGm;@U75^?fS/7#@F^3ecKc"nfVhCaZ$%XJ8_b@J^o>hFkg;"Ksqr;)cKc-](VQ(KdY%pe%Je3lO!nf.Z5#Sj>
%LZe7i+_$SQ)qahqHG<2Orn&#\O5/WCOP\>/+2!kt#roAqBIL+8k,@S[@56_`C1;PNE8Q6q?t]?tD32NAOhe_aA-R,n(,f*f\-k(c
%N952WU8J%gMN\*=Lt(jZ7tG\#V9d!D:aYD`h^O-2KT,Dth.oOf,!HFA:[KHZ][HsfaW/Q26R7,Bj+*ud8gFsI9]i;E.J!3k&k&un
%p3/I3_]b$&:qGFAQ\OS3W!Q,aNm!S@BIPu8fPT[!\fW.%&A5N+r4NQYqgKl.7,!^WNfMUUFW$<oLAOFMr$Ztlq9)[K.#4$(nkmM<
%9p!-!Tes0=nru?X_Gk4tW;9FQZj>(D.bn6`I!)WH$"N1IDE"Ks,>u(j,jcuCh]E(j^gPOR%mbe5ad;JkYb:k!V%c"0i\ERUT<_a+
%`[1&QaM/F[oAUDRpNPs9;C`oCm0ZA%%%hk\j5WMc.`G=8F1"GGhbbh&YE,R.\!>Db`T2\D>KSV*ZGC"t/@^P?hB+h0420-tJO-nP
%.P$J8*+@peS9'=DdMDOt3arbCF#M<[,VB5.=<m42k[-N>h]t,N:(t&W'%tQ=]1rh40MrmaUa-"&l6nA+7"pY/PQeI1\Su@Dr%SKH
%jX!DR"`56?6u+%8TaC;aV3E38afut>U*HmW5Uf21%Mp^JE`tS03lqY*`K1O!05oYR3Jl5#CS4k%I)ICGhqNmG:n_Y?/n7kG[BSO\
%4GNSM7B09kV';lHD+!'oIHr\UKXDKp,%l(Nrr$,AAATLMku#(9#lAV<SKogL)D%MmX8(!em-53I1\o`$dr5n5-i%XipB'J>)O6sl
%FR"Pc>fMX$7E2"U"Xm_m(4k=s+KIIfrn`Bm,AZ'RP*Jaa8"r$_=,:/kNA_n6;[U75=FfCn;A;*?%gdNUYtU:pP*95>4Lr#;IGGKn
%)A3]I?5nSQN.&?0:QJu')u4^jg$>0br>VPNZ9#IO,[^/Y;Vf8#h_+hDL/j4UkH;p%/.V!k?&GG)0hqOTpO:B[MA_uSl8I53]jLBr
%;MCh])dZg7D%n.'K(R+Or0k6?R/4'H(NlE.&U!HbV/S^Xa:I-48p`$3M/8CUfE56"Zg,hCpYqo>rfe4c$>ao.JN@em-7\KfooD4c
%2;]lU0M:U'_08O'VJ9/uL@<]e66L?sOmeSck"GRXqH"0cKD/5eWd</F[9HC1.L;71=H8o[a?L&I:`MK4)t.omfLVM(5P@hjqbo)9
%rjTPJYfe@RZ\,lUC'@4"a50uK/c4N?l5t?Q@j`bCq+BFcdMc)tOtNjuBq<e^=a/<J;FRRST`<Dbl/4abjOVCV^=`ds9&*&aheYb#
%1G?tn2/?'Uht<8fV#@R15PCHKPS5NF*a)Ro"?#no+r%k/!Lbm,X:)&CD3P"P,8g5K;95f6/O(e(J8%6L%963oRO8k+Dr4\:e3A-V
%`u`\!$B-"0.%m>$'I*i6.OR387i46o;1qeFA@AIeg]=Le7M2%%o9S,GjZ(\sgU3Tn_Z&IN[qigGOT:S^g)ll@Y5(Fj<-_s/gZj[Y
%(9Mjd:"'!HmVOgfm@4jN5Irs3nq+;c'[sSRASn?o"hg9m?<2]qJ%F0#?If+?k(K($khcIYlH[_smY3=VC6Rn?L4tS6X6l.i4QM-;
%heIo%]Q>d58cE5C6t;Q2V%&_>QR\hDW4B1F<:RJO)f0pIQ`@$"iL-A=d2D2idlA>`RO9uOi?A_;)0o,B32e"u@o"T&(Y$;_63!_O
%dZK:udYg6+1NoE,W^\5U_7Ba!AYU2\c%G9ckP[=;O1g\,?(3P,9mKKN;#g1?F6Yb+7lO??S0@tiW_$]ir^UTlK3K"s%<N1O/lO$,
%(?t&8Aa54DI]^4UD=3Nn>I6UU0,hGXaY>[3.5a\,1WQ(b,g*&04SG"+J[<8*Cln\L!uO*R.:$+a^DJt%1KOeAWE'6QWGT3#jMqa.
%'\$(maoq[(IL$.u--X0HD>Qc\p$m\'VY`eZ?qZK`A%sF;Wk)2KKDNXVs4CV6Vo5C4`0rWLP%A_KNP(rET=Td^B4sQiVs)A=e3EX,
%et&%iQoEt+F^j<5pOT'+WB(O0:/L#L<&K;He,S&f)#GX/b@TH$)'I)DVAQp/Od%7q`1$!j*ntoo:&^nDU6.qY)qh**LM+J8QIY1Z
%Ed1cg2=!^AcW!cb3qPeG8cGJ,j#'U4,g7]%VtG>Pd>>0Sb4N`7:0>Q3T'sMCM54*0Cq@m;Ie3`Vk'o3?kQ)e$2\VA3Q"Q-TRrn."
%$lo(%@BJ-)9[LQ&.fW`L2a?rjeTJVOM=VX03-&e$DU4Ma:"1;M"WlHf*YlHN85>9HaL^flj,!<Q<R3S9R9&pQ`njCfLMRLWn7LCm
%Eq:"4O1f>L:.DmD+9as\S<t]Yhg+5&M$_@5)8\\N'/T6$$SO-+s3WKsOV8=NifrmE<T&8<P,2F'JhH"&PMc?&.ce[M3&[guI?sGi
%eVd3]S<bk*N5V4RZp]>+me,J7s07>5Fs`71T!>I3\`.'kg$i!FU\NJC8^9"mKF.3NElBOuQ1-=-S?AQmDJ8!DY;tH*.p1t3eT!::
%>c\]5)fu1.7`)/jAl7MQ5cO#0[3PfN-lSRbN)ned&0r!9*:6EW=/%5ZmlJ?KJI77GaFjd0(P^Ga:]e_o8"tMa>/cJC>2hDM?e;aq
%%IS\^SC@4F*E(kdo2;.AdbCMhEN#`U)oiN0>E(\u]G:K\dR^6%l]D!qYAjY4EV?n3i7TD44Bc1K-MI9D.Rql^$'l7$!B$!H99D`W
%b(.00GjeC4<)^t^pcl#WaQi':9=C8K-..T0G]FF@%2WF9:K(GreON>TelQi!KL7*NoF9=t(u"X_7Tm'd[o^,>9X,td%]eshotU#H
%&)_,dKtu7h;cT."']9UZl=*3j'c.4UbTIYh:alS0ErhRT07]2k,pca7NT'B#U2+8E!Pr7(dZ_a6X_p*7Dcbi6+t>mM0lMu?okE_d
%*&W.&_0/$X!Mf(G<29fF"ro?\)]7]$'@_[!W,,6/\Pu1D<8/iQ[_Q_Pqde2a:nLM:`45rb#"T9ACk,5O.0G8J2(T],C3fsT5.#t-
%"g#D2QP[+h?k_m=;brJ.!V<1<aJ8I1:4bDch&_XVDIQXrDRgaH*`W*NQT@OM\\:EXTf"?VGN'I8B0R6O_Zd^U,MX2?73?gl/3V*H
%?o6RBS'<VjS%+!_NkrJFj"sT0GNC_K"NN8G7F.Jd.F::,V20Y#FZk8knB2UJOdWHXH9Z580ol+"!fA1.:d%?8/%R;F62e$)K%-7l
%%[i&;cg9&AK0q^Imt1^Y$H57rC6UTGSobQ@gQnok+7dbic@Se6pU4%"N\K;!"mVS#Wtl_C^.JPgMTGrS'm+&lkR]M@qI1"33soZm
%d"<1:iX$pX(t>Bu?rj9VG:^[0(SoQNUF4j)Z/02Z@NuPMCf1V9YA+l:PT<^#AmhQI$@O3F9J-a"htmC0nLrTU-(UW(K'Y7A/=/Z+
%*%QB:TC[3DZ#UiR:o/(j#@.[40,agA`b<C4oGaW'Ct:dhKmYL,W*O?p8/Fll8c\*eIF_'Z)r5+;3Me&CZ&K)kdl0+?!SW7mqNeLZ
%m8dS9AG!YkK2T#(TtFGFfN(^p:R\@YLC3JW(jY]fH6l<?Dfj[r5sXgU42T]P[Su>Bs,=ntCq&1b+DZ@?Q1:RsT_ActSm18Sa`O5t
%@B#fJFZi'WWc'[1P('N4.^K737;Z1JB1%Bro*QQ6W^VgC#kVFgWLX=A96k3fIHc`.Q4Bsgk9LFu_43A5+d_+K"`K>03R_IM"Bmf9
%ZsTASnp7mBbrnar&%+?>3b^be?medF@e?7_&dVC;Q>e3W#]9W`#Gm#2^_B9QU=CP^+\<KC9.@sTKrAU\*3.5D[QbE4Oe+`Un4=0E
%52oG2@XToq/\qIHHfI1_2[Fu62g/N!odOk\iF(JA$<b;<'FZ@G$D?l)MoWT<@^SR$;\3nj]hEaGZFL)BgDeV2TEN7sJ9E&sK-.pg
%eH(U#r!$EY-AN(7fob@L*cN_\"u,f^dRsfJ7\;_Tb<R5_hD<n8e,_C*R0nC5@8@$[gaQ?,l54/1C6bM_Hfb"-n.9arVr-S(,h%9q
%'[_q\#&>SOFgZc\CO8E#!)0m5@>luZEngkqetI]L"df*!NuACY=p)J.PC9)D]C!T?M!(<G[)9A9(01MYq?2ita(i(L@:]d\++gcP
%T*m9ID(t$322[JB-7qoM/D<-V+::bJ>IUK4jK/S\ekPS1,ZQVO2IFlK*QB$]S(u=3NXAQ-\Q5-cO@CX!^S[H#Gln'^l4N=&%tWi:
%Q1guZniBln\\C')$ct2u&EL4";=IWS&3S<)L$u%.=&TFLq@9%?Q*\k;;@u-QV5hpKrWr.D1I.>%<+9p/0gAq@).mb4CqJ%q"5bZj
%Io@qT.W5umXhO*Th@:@g(j:5AN^<+J$[IEin!dFlW>rc-gJoKHKaCG*E`g!h"snZD71#Rhs$Ia[DKN/2bLI]r*e_oel30<P,B=-u
%_bng?65Z1[X4<\6]B^n!`X^fFiEB]C`m"@s,6m#HS/(MBU#V-T=us1o;nj=Xfbkgu5sQ"34We4mGR/8i__d<=;UuO7:M-gs)YR(G
%H8IdL_4hXV$[uBP"?9GW<)N<:q:([@;/&/s\Z%V=RPI,E#?=MVCX6oaY%cgc$s;3edGR0Q4<:dGdImSGeY>U$c$A-Fcp1OS[L!"[
%mYu?@)bB),2aLdTBmP`mU0SW'do--&LlhC,@5-).17,,4Ech&Z@:3W`mhII"i8&9QOpYOWg&bb*e?C[qbB@**\&"$Z4@+Lh^tJkK
%7,J'^!d]PkCb5lh"X,`0XpmM@;Gm-*(:KI,N]WuSoG,`tUe01OM\D'B;#0*ASZ[F4,u@+tc1hDC0A,8OVA)2(.19K8Ncd"9@'].r
%Q-h5d<2i`E$pDNU$lb6W/EksUVA;9%m5I>S;YmP$EZM&kR'7-rrRR\6F5*a/Ci)+t=kbm:UgeVaSXhU#i^B;e?4H?H)XB@l*O\4Z
%"Gsq4N!EZRD#%^9@>*,$7@R[=$>.jL!'2PJ^PSGah:Ug%[_WYhf50B:[b(dT[MHaVa=)VQ'9G.1Jlq]T5^Kr-5qXP2&%IZ+%'U&l
%[O--])E&euX^'>SRf8s0E;dHV;1A!$n9\Bf3p?)@?laRO7>CP:??@L?Fg$6g`9\^K"SN0,/T=AX5f"?*DI=t<5W/ZGP_XUJ"-&cG
%]anW.P_mCL<)%]+4XhAW9Y!r!]2mS:ZOUU"qteo"gN<d_3k-q%NcbEi`ZBfnRA,,N0$11"/%h^0MA2V6<:jdY@M0>:l#<+9Y>_$?
%mU4GFdYjK`6F?Tk`%6R,V&FDPX;IMH(sAic;Loq"fAXl1$_Ejk*R!0=#SWLV3a?o]L[8U,7&pGW1t%#T1Dp%'`FDHmfg'KP&K(BL
%oCS[[JZ3Q5O-HU"J`:fe][r_3Ngn=PX0mS.'jVjr1"kh]n.q>DH%)r6jeXP)[1B(F8Kn5LpuHb]e9;/_ThFG"=3QCMbUU5t'MLIc
%!)KKPI%LEj")+`OOJ5$3oSh#0R#7*F;n-'oK0a)Sl:2(XlkI6(Faf7]P32<.Z?"PpfEgF4K?TGb;>6B$&OlRnSSSNDX^r4Cj:X_Y
%m&#YHj`16s@2-*dV9h[b9VgKr?GXQ&nm57m&<'LP`/a;G/ap#<c^?:saEeLk%21:XIa[.L@BGo9Ws!1bYGFe@PQk=?k9bI3Db#t-
%F:_/hOfqXA1kW((1n[$*d$>8]peILk\8Yr(rC7Y[Z9p/%Tp\)Qd@5]=o1<RX>/$D=-[3qY+C%Z&LeuWu#J:OkQ8t;PH2pCjdA1UP
%G)5M8htoCk?>%K[U-f43b09Y7G7B*q+]p$U;<<bYgCp/0WBu,?OTOZ#$m?nF)lG**&5qnTUQ^/7OZN`[8h?3jYOg;_-m9.]T>:=&
%,*6@r4I>A5X\)dhNGte!=RrOFd:6IYKBs%d0Iuj_Y.K(Ch\pfNb75K(_cp+#984/mLU0$l-M4H@Dc@;^eHuVt->d2=CW&WbV@LA-
%a3fF8TT(7XQ\9L)I!M5]gVGMYHc3@7a^,ZoPZFo()iT2[U+^DWOJ<cT%+Z%Q88Kh%U7nN+(gYa`;40N<d9/BH5V`k`Z!h-+hOb*a
%m$SKJ#?fX3\nsjGQ!mIaIc%[M4"^VSH7P&]geAob`7R<CEqNq4_&BdKDb;('g&l8k)Gbt1QDm(C:q#,UOLN']N=9T.#UXAq%F/l*
%#f6C0!c$LnCL$bFldH]iTd#m'5)']jX2Ek'OVlY(M0D\gMc**^Ci?nLqr/*43SRuoj,!1U9(`qWQGm`R'`i61FTj\.57c/A=cH\3
%'-D(!o!1^Sb[/Y[:2u)=Mh79sWUMpggkISc<.PN[SisE:FaY!9ZihrL'WT<?,53?c!>X'S.Raqb'`s2jVG=ZN.p]69U^\KV;41bP
%2s,q8<q5TE`US,]B@cR8-Q3d9eArONY\JZ4LTi:.'JDm_iW19K$$*(Q#U<HL!N7G>[\P2ID/61lc]&a]/^U3:R1<\Z2_@WMFL%4i
%?si4#,sg_NYs&GX_:)Q6dDA`q2C?GKS>3B^MS[."F(R()k4X8fYZ8Alj[Z-Ab8lNl3bi<l?/_r4aZG-MBc-J!J72CR").'E[B!Vj
%E\^)VHdtfB;:"o+Ym'>]Wm=3tY&)lu#Fj#JX`BVh\f2[prL@1]hULVE2qt3[@a38T&Pi"cm"UXRChS"0)NdB,)%K-GGCI0oK_6V,
%IlTe;V51P\_>]VU`n^]e+8"bO5+$[$)c4uedP_A,I&A[86^VQRMVeW_GT'$uV\6HXLU9d@$sE=6iLF;9LW\>&=js/-TKA^\^`NHD
%E!;#W$?L$pU_AjL<k/`I%p;>WVK.-d3d6+fXC!DUq#iAT6.:N!GCn4YK?B[o@="l75E,Bc?+I!sDRgSa;tXH__i!(5DNn?E3N!=X
%m9J\MiK_R:<VhJ9cRmPuidYA1/=*A]3;WlN*siVR0_._ja1#6*4&]G@.XA<k!mT/R7/S5(e2i^GWkA(`8DU.>bES]B3jUq9V4$CE
%.;sM9:Bd^uD]ViM.1:u<ZlHAg[2QBJa#p*Wl6`r&!ompi;"DH=KYdkTJ.^'-kusb3OgAT9b<'8IU/hU?+O]np+&dDB4_^6q!6?(p
%`FLP<V5ZQh?<sk(@B:'dRR*TrdGm.mpn+#7_g@ta'^Xu[B(/>hq#\i7E<7');]N>?M57L?%7pjc0Tr/*\J(PR=)uY"8.cR%MhF>>
%<N!lq,itKG(MNk>M^0"F(("DV=qVXW,Spl&E+E`<%_1P8PtE?5'8+DIeWNO*<8/^#0/6k5j_VUa"-Jf3!W&<>4WBq:J,$!38KlD'
%m>f?39=^-TTkZD!'`&/6PX3@_i%-6Y1B@i3kK7N:XCm3P/mo6#"%mrQbN44C?p^H"mQ\b):_9A[Jklm8(L$4G[<Y0Z1Z7b-df[7C
%W`4!"1K^1jX`7kq(]QaWS1<4s\],'pJ$>k.JGTfr^-q-B5kpjpc'6)Okm=uB'>$-6L\Eg@=i<bG%;(:9LD?s&"(rX"&:d>(.#6PU
%hWl/hU`nb):6:\q7$_Z[)bU;!Y.ckZ?5e^HEuRb.J>8qQ$Ca[U1&>&b+RM,h.g\@(1,KqD$Nr+dE7A.CML0T;1s".;BIrgC)GVn^
%VJ3RlSYm0M2glB(n3tkWnRK##b!FD>/+gD5QZ#299n+1bH[;[Z7ujCLi/X([)9)"(Y5MCLr#tfkCYL*p/fn[;S!cbWQ/nT_POBr%
%,rU%]5BR>/Zsh$WAhIq>K(R=T!#7U'lm[sY0G:5hU^+]G6<`BCD0U6OlC6TA))q=kA%HL+ecGrncm,;'\Un@%75Y`gWE`1f=Hh:e
%l1oUBDM_$cR7qU)D44p[fLY9:!cQL=]bHm.@Cl\O*#dB^b;:QtLkXnOh9bY8;k.]gpL#n#,"4@\_FZINMguIh4r'.;(-]nWOieB3
%J6FSI.nB6uh884#HL.FR?a,>(ji9L*"##?kJ>YXk3cGnV.1$`Y_TrOQY\C&LSfj*PW.D*!;46q7k]R@KEDQds*7t=S!`TK%g-Mf$
%;K*73k"3:OX@<;L7OWjIM2`39Mk*>0M[3mkaD'.pXN$6(C'Xo3'sq+]S?=6t,G'pR:]gBJbeO2d*?'I=BKY,53q;La+\e,3elX+"
%$M!($T/Drf1E>\qVBA:>E+(T9i9'fK?1FjJ(c[10;,rLR/^\DR%Y[&%56Pa17Gk5`b>iRiP;'Hgb[iu$G^>]obFr#@'cS_o6TorM
%R];S/gW\Y>lB5%?)\EesbN%,b-h]>-.rs,kD=jE=/W]l4GF#<I%EsArk89_L.$)#ebBFT,baLQs[kGqm-oP;:/9"'DB[n<6jP+((
%*ptAZLn(ld9Y,h96nEXf(8dfUAK9J)5^$Vn&/""L)m\FZ*5i<,7$1UWq4<GQ;'Q5H-&,p'G<7m(8UN-f[6&+CIBS\s\0LHH_r7>_
%GNO`h0p)[;L`f/:=NGWH!.&/o1$'U>$,TuB=2]mZL&`f<2sO%Y$lZY"R0OrfOS3NWG.c:5PaS&5";>QGb\\R4\c;h<Q$A@Z;D=o?
%=p-S''\(iK)(*26CQ[5o$jG356f)j67BsWHo#*<J$IWe1Z[nI8P*Oa.(!-T+Jl'Ud5E\pDGbl4H6;rt\cS$A-SnZqZ0N[o03L2u#
%E83N);l/)Y7%Fjg@9@:*E`Z3uWlXI*Whda=p<65L(A)HZ_F%?*SeJ@0-D(E_j@1Au#\/k\R,R.^"e.MX1@.*Q\l4G*?>ZqZ)<,@7
%O?-hSN7`ge<]\+2iA6m1a*!3S!,5><kfd[g$6+1f-?\3BDO_LsE*gB!)X.G%+]"G#h=QKsGgeT6JX>j?TVA9Kk9I/?&'T9AlbBr*
%@0Sf"h?UfRj8i,K?c10TUB(laEPKDr8Z6*[q).po;)ZhN0'K!TnrOC70$P"Dj%(,+4X0R9R-5G8*FJpN::DFa36,"g<*MVFmAL8I
%EF@bPgYR*9XA3nQ%X*Q$'[#iTii-onH*1]fVg?8q[7IRR8[ap<;'Q!"\:4K9mP.\t7\du](O;52#a@M,Kb5BJ#d@DUS#?b$?13Dt
%9O[/Sd!.[[:3L(fq@m'L[eYh0B-C',Y2Mo\VgpS'\jjg\Lc8`B!sB\OZ;La%pI`%JK5e)hEPYl*G(],ePWgdT&T0SdA;r,DUl`)F
%l@X[^@Hd3ZnRuS<g$O(;h+GZD:<P"8/0En!/`=?/k]^5G3jOa3'Im/c5E;L'[Trpmf&1\c_$oZ!^-,\<%.\#Dm1j3r?[sBnRc]\e
%A6C'D0nMZ"-L-Bj/s+d>Co]uf:l$EEej1;D>C$#a6;>V(]="87e0a<m/qrTp!Xsl6VkT5P1j#^fTb`J]H2F9t^Zc7[#B2lh.EF!8
%$`S]KCF4Y,GeE=_'KjP?)+FHKN!(j]cHEdHQ@)iA733,m\&F**QL"s'N.iQt!o^C3@nY:C]i&Nj6c>>YH+llG)'kCaWnYpCs+"Zs
%Ej_m,=Z,JGoP9HWF<KkU'qXug_"&5mj9'+Z,k+1;X]2f)oP-\VjteOL5uDD8Bhttei9=I_!a-.]2I3CfmCW7c041V&RHpt"<DkHZ
%G?3d3.U4a^j(DRdj,ZE12Dk6Q`8L8@G8MB`QlI7Ij_dH`j%i1TV4Tk53^-_(^"S<o&Fs\73\JdX$e^+?W^tK.f9]J3n(9=Xj]s3Z
%IAhn7NH)82$e^g$ct6P5D;ofS\9uu[[.P#T1_e'!=CHlgQ/o(*2;E3,&$*1)$V$h;'%d/&<;"'6=G%CSE:U/ki0eUj!%-9Dn]$)&
%?auk1Tr]@VX\-ETIRjLi>W@TWNuOpg'XFF>#?X;;C\4Rfima/d(/h;/$9XM2"Re.^ke\H*i6G_L8\q-0>E54f61AR#1_qAL?ni@b
%dC*K\2f=I-;sFL?[Cg+ZFh:6XQIrN=AhkPQa>7L.ZiVRJaf[>3)LLL2mS8PH<e@bsa00s54jlf7H&3NJ;S$9gKO:oPkn#7QYH;1^
%q?BQl=qq$5>'RT!@&Y<+!#;U18KCbU9I.AVHLFZ:<3MdeiA#AH/r++$ZC+nK*S>=c]G?i%OXFF*^oE5f;"-X>RteOAV?T[W:+N"#
%lmP4s<YPRe`b[mjkof(d(^]XH/BElX8P1^*%HfJPdEUCI8>Uk;=tB?R7l@9_g/mptNko#Khh$ocj#Mpq->nJoYjIi4#+5OMYo11D
%3L"eu,Pn?K&apXKm8:Z>'C>ROTffT4&X\U\3dIQQVFtt?:^=J`]J8A)?%$9D:^GV?9E10/J!(+_`(0%C@*%?I^@n`Jc=f(k)!mkM
%4TYY\mAeX[>Qa^:M:+$A#,QPn<+2'Ggt9hSR)d"&T=^;a;Rf4!P8m/Efa8Q(>N>d1X`FU5TehRI6ohpt>Io^t>4(ELfd55QLcFS)
%[&f+ka&/>Y>:lu.VSmQ->iJk.6Pc!;];G*_L<@R?DX=2r#(]n]k6&d&d>g)p;[C&E0c?D$BMA`R=@Q\Xg4a&p],103'9mHZ'F\H4
%NmA<[.%8?,)2:cT.9LqG0ils!`pH7#g_ea&J^E>3h&'BA*(C4<=._2]/ZWinZH6>_:G:"qP>11lpk2L8,n:'0'ScZ0XmTn)HK.>\
%Xapf8BM0$LlP+)Sg=Tu.8.&SJrj%2OB1h<K!n/Dk#2Yfs$%!-^D.#5!#a*PbjKolJP;;0+FZcp?id_h_CF/'H(l'L!ZtH.^%4M2)
%fnC:^F$)=)MrZH,b3KYF.@]2"8*kjiRB$4FLn5p>8#r8?^'^6Bd]&oVAX1+d$SbOM*%F?L^599EY%aulr]ORhnp.:</_+`iRdRdZ
%+U$u;)CK%M(76B`D4L`5,dgDL8LH@cUjFp:Sf&fYPjs.emq_:E7b=@+\9:5r=Iu]Lj(fWeHMQ6%rPl.,%D7_q%:>"kR*c+:!_pu,
%4.#OS$p?J@?'+H4EeY`P9:*&>$L3o>^(>Cun?$$!G/7<ZPG.^(hCk6^4,'.#4Hc%cKF%&ChDL>K-L_tMTY,!s/.d5^e&qB<mg2Y5
%Y]S_9.#SeVYZ0>mWn'HIE`G+KXYgn4:0'TF/O`?"@ZpA-6a^uG/(c"'T*9hjU0,O.iRpaL'kI[tkKQg3ORMJ>X'$ZJ$rTK"#js!j
%c;4d:AkCAXImd*`AT'rNG-M\tK]ms!TIMZPeO1!,F-%tj+Gu$sUKX]M;s^La1ruDN6_]BDLqo-OKQ+[@')`q(90!s0WV)@[/k!nC
%$/.@#%OErrE\CN3Yb:,,8EY]'dRm*S,/tS*5sg^1f*;(doJ$Fi2#DmS;6L*B(Q&9m^[FFQ7lDbKC="/VeK:!]J3in/!]1m(kpS6Y
%K;e^B'VtJWeI5J],-*&un4P74nX-$o;V>d_4&f[t4edf8;5$QaX$jWK`rWum!=0DVT1VWOVQ<kSYeI@Hb'aVH-/6fR$sed*\FUa0
%DGW!';.(rR_c(rX!*pJR@/H.e\Z0RJgd;?ijLR+,*$kq]m*`%3C1nU*lR_)Xg]@Ooclk7&TnSLuPZ7+QGO.c#8W.qsK;IXG/8ENQ
%4VAOA31AmsD#-[1Y8YTn!BYH&N]$O!o/;u'2/\n/0%'DPs7.<O^X0KSc7_$BV"GC\46lc2j%c%-dC>t>:GhL:rI`%qr\&c3MZnW%
%gs$$g,jo=L+<#I1"+\<q/-5D?45'al`Z;/^7,s=$!2=HlMZAmLRn\E(gsIT:2""lj+:<>"$j_j)fEP^pT=,4@nN5G0Uk<ls&."9-
%fEd/KSZDt*ichX@aNhDUV*I!.?#0[2j"Ama3JMa`(C2t0Mo@q!b$Aff_V"9e2%U[MYT!k+^6@YDg&,,l#BJYU_0R4<mUSPD9CjbO
%"<hb4)hM>pGHrCuNB>f*7$P6?,s_[6]@[aP`#Yrd,'Qf7'BCfjYp]m744t<9\A"/,@80#e0Y;pu\;Ooa</hEr/Z>Oe([H\"\:]2q
%.,;YU+I_2YC^`Yj/li0&n_nWq<FP?*Bi%h+%^lSlkdRZ'gK"<Z2ba/.eeX%cW!iJWUFm,M)`72f+>rsk@&c*-3/_>JKAur=eEimg
%9E8SNjFj=I6P)r%bCjqR14[L!,[e\n;X]dT?9k^V8`2U0%TNTYei^Y2]Rn.%/l0EL\Jt\jn\U^(!XOiVEEBL-4E8=H!qDkHj?Zcn
%R&QOuKdYcXHjrkN#PhPfpaQW1ekE)QU^M`H/LuO<N8jI8.Y1TOfl8)>P+ibK'$L(5aA\1\_*l0]^p=uMBbF;B"cNUm8jsuf99bZh
%i&QH5Ga&(62_KgeKGtbjPJU^icp3hbG"R=W:#PH60KQTfTeHfhko^!X2(NA4FV`oC3pmo^!K%;_Jm)#*IcSCCeLTmMiUCe55^<N.
%n,U:h^eD.c#dgNr`il+XW^[;n+Qt)71XSSG!bWu[!6eZB?n.BhLuK_@-Tp=Md4Q]^+pR)GU)Jh%*f_ER86k'eL8J@)cIN:]&5ic9
%\<i"s7-IKf=-0Q.e3MS'g)c(X4a@&knq+7[oW"PAAE0C],bD>m$@G:`\jSP31^^@.`7%Pi0sMW$IF:-62<dN70oRI"CFU<qMp><]
%8bH)i'BteJ^*h#D#r'k<"cS[.!mhW&7DtZp&jT,&MB(:U]LI2X$<pYBK%lWkBJtEEed.$WMTZ>dQOK%`Q6l$_$>_Mcl/dJnbi?Te
%Y)QIJ#+cR;<0[S_$;jU2UG>.9A*3jae></7*Z/<J;lDG-bUt>IAO9q`Ukc<'r]!58YaTQjZiCsF[&kMd@`Z]sZ=QL].RR?CAsi=W
%6K:W53P;6/NI?olSBMT@$sLc0^tn69!E1:O%FtpnrItfGf=$CUXT2m[O;PIUa(,J=4AKAL-u@)""sbF_O-g\JBCq>mO=-8Z9K)+r
%6)CUg1eOF_glAX)2=NW:0'H.=<-UrT5^:RoDQS!gU*:UCS3"?2OP9#K-X_%W+^p%ECN7Fjf/+2P'QKL=d?naR)$>P=%e'X#ag@ZB
%-3#J48]iD7<P<0HBE#[KcYkS/kK9GRqRL(8F=^&t$Jj]>NtHUNQHm.#gP.8!h,Y36"4biKJ9*24Ws!fhMECAl&85Sc\0rh:NiKo-
%Q@ac4&KX#/`G?C`HmpB^E%eQUCt=p&a'fCbo$*WEWF<?BbuQV#Ce-<:bH`?X(W/MSPc-SFM+juR3_?Z.T7]W7b?"<<#-3Ld\>CSU
%BW4iI43mard&4B`oEYq*TKli8.?rO""kXDT@$1'ljBhB;!-CLlY>GIVk>!0[UQ&2j*%F1jLD*k!APAd+'O927e_mg>,W4QNCi?+Z
%\b(.<Cs+MiS2oU^OhjN@C+9BI[M1NdX$ZJHqsOd&U;YLrk]IreTK;rU[k+^,R91PrV^/\23*-9[gO%L6N,1$\@I9bGDrFI60bG8u
%C.]bM1IghO&nHu#\LpL"9u;n]+pts?ot^-FBG1I@Y%3u'%"P\9kbSuk:WisTF2YV3W:<;:%WEmtk61F;MTl.^LurGs,OB.NC6V\.
%Pg1C-3k=E!_\mY$><CcC9%pQe)^1TT5-#Q(2,MC[5f70#i<cTU``Gtpg("fji?M[u>"FtI)VI;&<?j[]h!78B:p_u%E64Os@)h:$
%Zt-c0`lJ93@Y:XL0l)O%NtPQH.B(mo^Mi+E(=5OrEV4S8OU9r$f!r'rS4X_SaO`GfaG[A*lGG9j$_KiFr6>LtSZ57:KTuA3@a;k6
%P/sRJZ'\!goZUf;`!6DROZ.$3_ds83ZV$&VdhF:rJeM9$Vau8T7Ii\jABr((/Gik,-^3Wc-LoAMQ9LWZ"6c0O(=+jnP_(VF2LIop
%GI8\BCH+*YT]FW>Ga3@V%_8&lFe.!F/6niqE>Q956adSW>^QXHX.a\D8U$rkk7S&ZE_76@[;O[qB*42'A_MGq'ms5S4$ZfXfqrHX
%[OBKaaFaOAXl4>YKPb(N6(#lj2n^[#j_ISfeT?bkjkBbrSctA!-ufNJU.6+*k?%d&'Ik1s,]k;Pk#m#F8mD-5-4-/nj)'[\B,fCd
%aorFI1`8M_#2_-s?',atI#eZEr)b'$?>[6]B8r6_`KY-HDjh(L=p'r0(bA71$(;<mNi>nu@ud0GZt-p&!npuS(9VEG"TgW!>UTPo
%;Q@`)Yt,[&R6m3d%hEK$G*7f<LT\=<Nf)LEaGrY\EgMW>.)$]_!A5e>R@meC*Y800Y9:Auf\4USQO8u_mI@>eLf&4j`R=sX=`RA&
%(nXq.ULZ,m\DQ'Q*uIE87Og(CmKAp<CY7>**Y9PE^lXg9!B61uK,sE7K#l.RY?M2#;0WS8!(bsS-"(601tNom$@:[P$0_12"uu*8
%Zfd:C)SKY%Pp2IsTQE\<m"ARhbaoKR7O:FCqbH;dd[E^]IIF6&J3h3jjUJmiQkVB[Fp^[fLI=U<BktCk>U^Z\JLkND-p"#JJQ(\f
%^GW$0a_Ul."O\h()HZ1F]2=KO)_*G5!gQDbU'd(J_A=)&a<B`6ZU%8@[f>3iOfb<Hef=]81-8rLfSPW-)PaUq3(KYN11auT++E:X
%WUEU$*)[SQ<QcOuUCicIdbfb1$XP.>OKtZ[Woau)QJnu7?75&<5RZYEBUBHN$iPUB"iX5q$>e#]S_PiuA2R'rXG7a-itO>)mO'uI
%jZ#T<1M4^k0X3$DfTB^;f^tD1e/he40LIC[<9pk4&ck<IWX'Ea!>tH,\mR.3kR70EW1^(ce0DHE?DHen.nS2`9t(]KZ>B]&+f_@o
%=NM<2_Wcno!a/])n@^^qeW_VT<7.D^lX1(bf5-4]_<K!Vio:#cCin0m<*L^m4dAY_=e6M<>144r&Z\o"6jk8W3!P=A>7[,j.?iS$
%6'7o1`r^I**e@8_$"-4<#C@XKB'$aa&CFI<WEJNr&al2H2HDD30kp<>)S;t+<6:%!SiU0?aO!lEE8iGO>8A"r6TN*O'l5XhfLTaf
%_4GX:*\MuCKu65G&*k.Hd9[NF-KtqnY5(Lc*jXQX$i`Y<Tu-+.n3W[([,"j7n0h?RXL4JZ!-U0O1#5feJkBKmJ2'\a`.?C^b]l$V
%?:UP0*u0a[$^dd1"KYAS;H2oW@fn2eU']=X'Wa6.Jk^tVF1cY:iK;sqaqTp<S^^C`##r64.CBq!Z=04C*q8f<`eJ3I=C"O(?Vufm
%>fid6=Y[oo+C2UR#'3WC;,nXpdHJV;2"EB,">M;N:E%kb8L6V[!%*5"W+(R;q1*+ooO9$G+[0GD.('k2$9/)Y\c?TIH>RI2fu=Aj
%<T&>BL#j2H84pmbVNhe^R0`sSUs0ZSdZJZC0M<_nNDurE/>jEA$9\KcN<=rAQ,:q=!`E`MJ6<9?^f_m>fR\D&d",.:b]tA`+tj)!
%\<5%=d&ic@9NHb=J_MHFTSn_?Ja-r1!A-B@)X*Ae[f]61a_jEWbq+8K=sOW9<tQkP0e!h2k7tqqQ"6HDHFlSs_q6.fa/GiO02iOU
%W",,eU@Tp>U#$MG"K;#YhrpYZO>=S=e/a+B,s)W/FF5Dt]U?.F%5]()"u&+r-BaV5-Q<f(.[A.j?kdB?.UGtK(I7gLK+qdn'V#j[
%!?PpLB<"/Q)`t3p"I5YD[p0rb?qj.j?s]]9L8('3$&=lrGF?M,Wuie>1D9g/$J,8i7C)NHAMUf(kf)=.@.%5-d\F<a4Lt&52`=M[
%#"e8Ql;4>$iiP`CQ"2*P/d`rp8DF9@?Z>j%7lB9+L?u<X:3-mNkAn8O/[%Nn7@Ze)J5hI];9c?%0FkiV9%BRG7"aDpkKDB8ZCo[9
%i'!EmLeC[MC8**kD+r9I)i0oeBNroL$1q+7Y(;Q5kp4,[b3'R#Ku!aG*;Tsq<4^F"I>Z5U0^1Sl'_\4S]3,d+ZZC'Nk_)3!c*=`7
%`HD;+o$p/t6EO43noF7#N)[>$ZE!;E+HJEZ5b,COn\@UU!h5//"LOTp7jt(IJ^"<YdDg`Md5*n$?$$*7Jh;Bp:#_^o,<`F#Y2Mba
%Qeki5RUif2L5TLe.U-.=k]J$ghRr9k\)`NEA-('Y)oE^\a"N_ZoWT.m:;LKWq1+Abd.5(K!]$s2o29>C.B$!9BB5kL)]Q?6Lobo,
%MjPRe(,NHGP8#?@S3<E,pi2)BdohhQ%o"K4hfjq&_r(ft`pECDPqm:&,RO'fA(`(%Dj7=l<&fHC:H:S7U`ODTHe2NniZiYVi`ZS.
%5<T-m-[W.iEoEqsK[84)hS!1.3!;An5";B!=(M3r%2,1^S)7m$P*JiImt6'=CXPEN6.FbF_PM/O.X+9P+fjQ7iW,^q[d%O_'ITdU
%eZpKnWkoY8@j0:6%VIC!hflNB.rJlh8YHO6&T^5Y^Clh%2^M@,Yh6a3,K?OR%,@1=DUlUBm]b_Hr*su'/7eFf(qC*sc8IX2JhDG9
%Zku/><=k,GA)Va?2/;A?X.k#-^/"(1Vh_Is2oY1nHMl&[Y=at\iYcEh3e:4.bkcRVNF(<A=JZQE]n&Xq@3Atp)$1j%dj*90<.t_<
%`\QO./n3n92oVjpW3.Q%kf_o,:0)6X"I9trV0a^tT^W%L]O\a+b9:1qQdY0m#OWi]^iK\_JW\t^HnQl3acEON2hC8I$1)okPSuXE
%ea&B'd-5RnjJ'c61qLgQ$"Vi<&K!^]&I"BbGZ]87;G;MKeOY,Mi0?Pa]F="qf9o?YFJum<],$G.$3R8UHa`o6#/efgls8t*abdP,
%s0m2h4aJ*gp"b/t_nH\dJPbY/-$c4!#8"+*Jm9Ap6kD1,'Auam75<0(:S1Qc4hEfSO\>BTOHEYLCt-\[f@/?OdoE;"&\J9ppu#s<
%8u6+=Od%]c="),g4L\cbBA>c[l`cb2<.]#Ael41)F)CuMph5S][\S[PG@aPI,UPc=]GMK#o8m`fh&(03#<c#YW!6n3B7Ku8r?0N^
%ZNUXT<lU3b8lKe>peY:NC<.+m(5eqP>)dAcN,j#SR8H#/:n,t6d9O`9dd3Y&/9/ZUq8Df?i:?6`d5B,O$u+j,]<>ehL914hf-Eb\
%\8s?*)o/o8jLD_`MApi?07b<Y\5G7l<6o#?%ODrCm-St<(Z^"Yg]O`2>7sk@Ke8*s#+"0_h9<\>6>LE>#V]uad,QR0c=e?F&<_88
%WB`K%?o5(1,)%dH@eJKg"hh](A&sO-U(C`?mdM7aQpX8J%I,:#@5L6-P?[rimu8C!(3<1mf2EFC.EUo!2(G7&\([l]gtY<O\j:R[
%[u4GE(.^cI4aE#-l@NCL\=eecN7P5N&+UUk_.o-t"bkV;[q(bL!uC3ETR/Nl9SR+4]8sHnSNpj[;#q[a%6]t,m2QPa3WL2A$[64h
%A$MDW6:d]bFM-9a)&W-Id*&VtlEWf"Fe$e7p_/@Y(JpI,!<4\i(fN7.SnPRNYS3@%SVZj5MqOMj6lCrZI_]u0\TC+Rkr<`G%M+3P
%@uu7-6tn?:^L_W)MUeje&AZ<\dS<0T(fEpd:15f>`\OH45at?m#uIN(J`%AB@(.HB#h2hXUf]7>G&J1FNWE6Nj\Zj1_<IrO-A5:s
%_eChn&X!:Li+1I4-7@b>2/@"JaRXA;YX5)6Y3R)CZIbrX!am?nJT[D(9X6Mr2g#\3a"`8'g`+=mEJQM1Welu+FK@`jWoe%B\c2b#
%Eq]g=SmAd_e0*jd+cL`Fn"bWD#djuK>P7C1d&ZL5fRT`-Ye]=ZFr+EU`aU8`o'X(N)iB;P$sr$i0!l/m-l-D^gd'3oLT2&W&0CI6
%n?HQ_a%#<6Z]%Vj4<N=ChQ@PM<Og/qWs.94:3hdLisMKSk7*Qd8Ztf[S&.:_(`Yo-V$/i.27"du4utS8.3OX5P9_kXi41N/TWtLX
%)Zeu6"tolQY!R-:.5XM,Uh8MuU<:TFSr6p2NO_@^K,"3"#ssEAdHZftq!+h4pu`V,MR:rH-98.qPD>q70i>a*.F6F&fHshQJ=)F/
%ZP^APk[(AXC0hh!hp7A0oXD+XDKIO4rtVG*0@jbST`G@.plV3!D5?n9rZD9`q2cD,6t`l-RI]?p771T0nZ>C%)qiIdCY_'+]2rY.
%SB%o2SRP<ucPma?^P<@u]k0h1$"4j.2\k_[VTR0"k=0I=bgp0R-JkWA;iVXjM)tqUBDp*9,cOgsE0Ghk/4B9D[c'_IDXUIfr&k"%
%BdtgWG[iL2G3*F!;"8QmfTYokcmLo=!\0Mb!Y9H%#'?rE#+hnDLH[^o%t1Z>5q\*H[JpF1qJZ;t%d!$V:P8[Oe)2f"+3@[2VS\]=
%-6D44f(BAY2BWih5tO>'i-mR`7j67[>e=ED=iC@oop#LWGYiago!s;87UaIL8K?(r`?L]IT^3iLZDj9\n_iM.(lt/o\-Ra^]McXG
%L)nMFLa#o@97Ye"nIBk5c01rGVjEp1%`f/5m!"3*'KPoU,j"Z+/'L)Qk/(@_4V#8,XgRYK1EaEo>44.;eQQ!ZOtT7\"N^;XhtJH3
%iWnD#bn:GFH^n<jYV>=LH5#j%>u9ncIXcfj[nroN8>41un$$F0(lPJ#!8A"G7RDtq$kSb-qQA/<DCgQ,B>KID3&,MVQ;KnRSd#f@
%W`4I!a=@rS7Z2L/.AmiA%3&%*U(O=mAjKPkF"[qC"bM&R6jlp!i%:QQ*-rgGO:Us2]NW<e;Ac,a+hO72Vo;#j6)>oUA0e_ik=E6=
%nD7in2*+0;6$EJ</Rf`@h*rM&G(%m-d1FP(D@qUc7OIERS%NnW"YdCJ(Z[.?I#:>EW\?/c2^/sU9jtKq_jkt?+9E[B*X@A-[*$HD
%iN_6gd1f")WRtNh6f\#=YE\Qg6$hL/GT`O#OMLk5";`ORE<pX6A-W*6FA?dtTFmV(V@od2b8e,OO@]65VP+SAKQ(OioZ?2RUfile
%)3MmK?O0#jdk7"A=l1Dc<ag9p^!.H\0Vkq1!Qj;d8J51L&OJ!tK)CjN%OL1^3tHUH*&3+X^0Bsm'g7<\iD&4o36\TbY$%e-`?6NY
%0&qi"/Nf)oKo<JeP7Ldabb90l*IogogH("::;/XH:ongWKpJNd9jQ@=a!#.`1)8IL%T5]SEhP'O=a$ocPSr=U<1&l?Sg>?`P/bln
%'rqrD^`F,?.EFn;+Y:pE^2gRl6bp^8gGc?_&7j$X<e/SN1gnt<$t[DCK12GClZYjJE+(.9bI?Z&@jYGQanR>Rk\U?odW.MaeN/fq
%^sSGl#&?LsZ82)nRLm"L)G96MRSRAq;/lEr`h7fgMmm:%5dp7X>30#MT%S%`(h^'l'>b8/=Qa<\[1>Gp%40:PpYrMHW4-hlKc8?e
%?UNAU(WZd!6JXcec5O^HcY!\@M*daO\8e5IL$qrmPMs>Ulf%Q,VP/Zd^C:4O(2&8011A@]YY>9abj">RPVn-(24Vo+@^Le>e3hjs
%c:GHrC9qJFB8/+*g$->8&L\gY@J1L9#>ISY\^"XPg4U7)]+XM!U;WYZRWbDJ#p5L/e&_JMOoN>52sLePH<Y7?V-q*iOI%d/8CpW]
%Lh1Eo64JZ'-;@(k/X+_:8,5ad5/M%L=r*@+b]>Q'Z:<?.-'Z98RK\PSPeb`GU-#K,h#*ZcN,iQ&@rEg[9TunC^q?-u6Z3CF:C&f-
%7!c(O0Pq&gAo;3j\ubF*PhYRo#;?kRAQh^kZ,ESUX7)pOj_.$am"SY//Fa(e1BfG##-EQ6i''Tn$;2%*q5f+_')N5B?.%pO+X$Q-
%apS\&5HGoZPt2o\7!HHZ#q2+2Uu!RGh)49snu)tQNgH;.?HuR9rK5kaMQBD-.:gus<Pg`9Js^k_Q,=gc19HoJR3[mtqEI;=i`M\n
%'LW6OKjtGD'^-cp8JhmZA>0ur>([*tjDpe0WZ(!UM(_J0:I:#WC^^<:!J)%MRG)96!K[O4Hh;gqK=m\2[L:l+72;&cN0mq'c:($j
%"`]Y@_r*!MNR\UF1Fm[cr+a)^_W2osEZcHR3E\57B9s?p:BVD)^,q"^BO*g+Chf=fj<6S5+J_%49$@Qo)2Kku;0X3+/BQ%qYo`#&
%qeY?[K?sf(:q9X2k2nDWYLTVFpW9\.UN@A_8@,R@Jqnl^XL$;!rR<k/0kO<P'?-dcnf;DMl^3fL,D\&;i50S2;&*IDS4&g6(iJ7P
%Hn?g!+du6<0>1uMR>.*(rEAG:_$4<_f+DR3)4s6(5D79'D9,H;3.h5:4(M_UKf0?Y4:AL3`_p0qK0WpA-JZ*=O,[d$<rO)Eah-*!
%c)ebl@8=eAf8apF:CT2F/0h\mQC$,j@"IQsI*7VUbG[K0e68iH.5/iWLeB?'ZV[Sf).5+;B7\Fn.7*Nt0o2(g.F.X&&p-hcHiXgj
%q]T>>m!q2HHlo^6,DB1#2_ZCU)c.g>R<>u;4W7.D1Hrf*1G@-!^/?`,aNZ&WWDTO/43!ILH0pf`Oq8:[+be$jalFTN%oUbbQ_d"5
%qG-0JZ@>bSUG68=RAUBK&0&JiCdPIaE%h`l5n"<:+h.PV0Nt&JR&WFX+j=9^Ejge:_If^M.BcXjY[KuOB9h,8]o>C@6nuM.4@srM
%'^rPqgFA$']5Fq:eVp.`kpKkgW*Nc53pL+FiF\?oOfcQl?lmm4/'<JG8@Z*cp9Lt@KdqbI,1PF++N(4tW?I*S%^ZO,/2Af.'l^Kd
%JdLP:=RA6-;NQU\Q9MS!];DJOYTWMMaM&i]"';=4Gu>W=8[8NrYh6V>Zc%.;Z]OcfTE8=%1a!P9R8SsSP@qFQlO5:ca.AcaE/UEO
%HBEUV"_EB>/@&l1d'KCa44)\D3/Xf[a8cCI08g,F@7k^3-qOr&U&!a,E$8Cd#/V0=l+42b%q*MD,I,o-)h(,Q&g`_u9OA4N>!-F,
%&(G)==i`HrhlJm>c;u_e@(u?;';+eM'`)#:]63fJEni%5/r<Cm-m`F8i`uoOAFrS3ej/7@46&kl3ZAQu-Qr:FHEiKnd\m>r^J55(
%^ernoOYS:N4X4cee]FULaBEN6N4C8Y;_6VFk[XsS@9W>_E6ReY*)iPY_]`S"7$,Hd`8'R"0ua3+k?pWP=]79ag5am!FS.=ZMc:'0
%_)425BYS`Bm(E'`c_M,ooP,5]W"F<:&,XDg_0r$-KB6pQ3eeP><.-YlW5W3t5k+S+KL4[$$W9-a`:M&j`@$=A$PY@7\1QdZL,:-Y
%1OBqTf_%;Y9AD^bhA;qb9A((,G2TG;QBO/1!%-eWN7:P^jZ!B\6=Q6r)U`ipJ`\_'/g_DO<b];6[6>eH-.b@9&',;7@6,Q&d$!?\
%\L7!(O<#/IMor-`8F.N76b#[1ZNPY_/t(tUa=s3%@`,3T#9B\!4a`VH[LcouY_*Nd`?n2N*IBcNWn9XqWFHSl<ZN,m0f<e,`N!DU
%0rBs_bZMnrJK!;(5NBcWA-Y+q*F%1$Y4*J(=B4_Ga/WSR6.UI'$U[r8>:?fBfYEWK@1u45*EuXOlI\FeWFHT;<ZO8XZDuQnPc8+*
%<E:,%\2%'#,0Qur$X6XP>NdhbCuWXfZ&(08N\-3X3qcD4U#H.!bU8lN1N[GBbuCs'2H.RAhQ/cH&81:\_jm]8%s:nf>IZJ3Ca.3*
%@g@?]'cZ?m2=0;J<3_9FX,\b?>'4YTd+#=W6`Z5!,T8^eZ"VVV`FuV.fYXC``ss:f'ml=TWn9Y7<Q>k-XZAA%Bkl;<VH(SN3itHO
%n7gFXK2A%p%?+JOf/$%$LXd/8Xo%]*;JeqK%T]\m2UH2%1cOo=41TPHCE8TjbZYID/_&K$bmnWnVVr;29c]_U[@4X1kd;>V)u)9J
%llk"\Z&)mf`u^,??LIs9<nDd.aYof%#Ksh_o;)()Af`g(b&BX0A)o`B+'J(9ohH,T[6T&!ctQI&)^DtNP$`Y8NJ>!p>g6=smE.E-
%`X_8]3I28iA,'P.BhRD4=cd>?NKkbA0X7tk;HeriiHa7>d>"IMZ99G-+D=/?!#Z?g(8kI-Fs2.@FDsH3YruB?:;#@ZPO[ZLOu:nC
%k)ag3/$=VACP%KJT6^8&QW:-!$l/g4r!29?K0)gfn)`'0TtD592WQ`/D?/O3cC#\I&n[?ZP,<Ye%8GoZRC!-$\gG<lDME!/'1+qU
%FELbX<IX7X]fK?X)-&CnWhSm8%K!]L*rRX&R?1Z(EZ!3h?Zb6t13kb+gS%o;HEU?<`(Xs8kS?G#4KG6cXSJ$1<S+8<_B!_T$[G)T
%Moa?u)B;:Z)%V"`ScEe:%R!,m_7i3ar01EV@J*9*1UW-,n^Q_l3S@.],!K*Zd07D,-(^PiHE<tm%_`oGHuJ"L+,Lj/;D2Xb`H_ZJ
%2$$HWRG4fKg19T7<aE.W'WT*A^Xi-`Es?p"X:]oG(RYU];Q7d?i'qWolQL\d=ZPbBY=Pl/E%6W`<o62YH2ML1c/4Y"<27^S,1n9K
%&ATH(n#%jFnqOajOb;]7)>90mBU`6ekpT%n(6O7)8,FAtQ6k]<%mS=%ah67=3E!hnrg:l,*bKIiUaAe9,NV9tF:((.Si=&VfbVpr
%55.Ds0KA-h)Odd-_]52YZZCqa8EYUP@5\`d7u!3"W<>DGmX?Q_d/;;1pL_^;9u2^?-NWb"'aP:,:;I:_UM05bCs4EF90m@HIm"in
%X\1tV<gu19Ks)d3)?^N.&EdkE6Ehn0o`@=-TscF<MFWiEjNTts6/Zp'c#ieGGQOu(n6%Bse.3Z%0g4QYjG='J?"[(IPoA_TK^rkZ
%l(hh@d43!T,BB$&PmZS;3g2/+#%jWFH7CW5KtLfYM*0If%;#]c`$q!54)@Zu3=%LNcsbLYI`R_U>[.BaBVChtS:j?.E]ZHXq&XM5
%HeVrT%<?VKehHa*\kT4b610cTE.@G+fdn\p*G`Q%/X!d7$OKP0^-M!Bm"OO?,W-=/DR0mpV=!JA$;693#uU=nEZ-c>'d%HJAH>%C
%gsVt>WWB?P+dIsc0W]fKlrk?rUl%-X_1a>Y7qnl`^M.F#?F$LqNH77<a!q+RUl%OEm>0hYEe2%I`EJ':gT4;.M[!,."P][AB_1et
%gm)Vk6q+4m":Cpmg*+d3EtI&Q4Wg^EFT49!+:j5IS,[<$hB%;'elYK=;<%A5NPaLdVH?q;NZ)Xo\kFeI%T@;T3r&-Eq6K8*U.*1]
%%)@dal%]Y5mS+ak9ts*=H*OH=PSk!W[%\/.oF`nJj(r9@=RKY@;n'UUcIp$%p"h/r&?;,gmYsU[BBs-c$gIQL%CP?VZ:a?%88Mh;
%+2i9Dp4eR(gF<6KPZ=5=\S4-AnsJ?XNaaG\%YL;*9BDV^4-_YqFJ\HdrYCjk<9u;H27-KnKet&R*rTnN[3Yj:BT8n)#1mZ,6LN<e
%HeYFE:??k@^cQBKik(F]YEH'OkT5_4BgKm%:3dP:/IY^eAhI]Aj_=K$"p`FPr6P>0$@dEi[ID;dDpc=&GV8i'iOeU$dX/5HBE,rX
%SNRg*_9%J;7\@@2qp;Yk_^A)Q7\?2u)9CFd%%jX!)*V/K2!67Ke*tK-X0F$b^W*XO4WA`gp2-nYpUqOEb_:OV*HUdjX=qm`c@q+p
%-O8CZ:$sCTbIqWfYo.r*lf"&(hkP\-n9jTEanObHV>"IqcMl/gT/f"VIBr?n[*]77a?K7_#P#pa'@J69?\hLDh@Q;1r?4@-H:6pD
%iE"E.?BIB1qaICJll"K?ZYsAk5']ZpR1'&9]&p_^A=\#>OY4kba-je[YDH&@IZscU_K3"1BA\PA<o0$'3;ZMCB20K^T.GC=C\6;<
%Z4B+q;6"Kl8a2Fm081chDi.>VrY1tU4f\)eo;VLqj]0udZX7:dcCU:a3Vuk.kd,JE++!XaXE2Z.Q?DE5a1<tX*bQ7l]e2KOqH\KS
%oXsP4g%XKiV=uj>SGY%hG2EBXq8ilj-83$9q3h!U0\*T#`;!m)Mt+X+)rlR95GkFr*ng@Gq.+lYoZHOBaY-S($d[%gS:*2/o@Z43
%cTM);eh\ZabrYIWUKs6uO#)49?JC\,Qi&a*=aFuZjQ*p9H%*k^ZR9DcD>qc$K<lq<+3kdQp>Y^3(Od?qX?ARlZLHuNAEhA/ajQe[
%D$uEmr5<tD5$<2Sp>kSlC"jDpSNT"1G1PrbG@t9/o'`[7c5rQ?3W"%;B%o\MnLa/\OQKlDA,8&SR94*)[kguo_kIki/hjHN/ruH5
%@u.;EI&0fu&jK5bkVdmYEq&oe#,B^g6IjI2,%'QK?KD/mBF(32Rt<$R`]SNqWAtcDLLYK$,.Gh5\9fU8JrY;n_5Y)f6rR5DFA..D
%%>n$f=]b5SLCkqE"7(c8N&Zl<reNCuhbmm'_sr,\<k]WBAL$tXfaNnaU*5aSS$N$UbsB_h)(,c9G!V],%Whh076'ju"`QMjm-Y9O
%@4cdlIo8e*hgr(k#\]?s!LdB8#?:1__i0q]N[iVUVQCU'+]D,LR.$dc&rN?q=f]=:(de&a9f"IH(0N2J2=Z9GBOSk5/hbr:72p]\
%"&9s1k(<I&9O"uY'5,u2rlq`#:S(p,c%Vecc0bRi'm"GAWM>-J"K#2ii")I!QF[lf\i-j(L5T9RH=YUOpt/JO2as)0U+mI5jYo7T
%Mm'YdfFSaM0f)k2Ju]U4Kuh=3--E(cI)KA5ZA[K/U*1U#JotSuAD*I\^[ijXoU!Tih-),f<o70=GqSHrbDl@%pU_]@[eTJoS%Xkd
%$?SZd>d<Qf^,.R17`i%jjt)mBo0i`4Y:lKoQ^5ai&R+nRoj)I^Mk`\pop]U_hZ*35Qg\;]q"D\=?`sA?Z>fK]pM\rMEW:L_/'m(d
%J,S`YlPDe!If%$t^3]h2+927oX+.ohs+GmDO8(_?Wuq-?7Hq(9&ZJg8=G(gr!lDCPP4@1N*:p?F#IoSel^7<dmfM-n$hE(j7,44.
%,@^!G*L0G<JOUN?CjPJPGWqcq9!"0md)Y07f/fRJM*k*TYDO`d/0S/tZ[t(8;Ta$C`3#&e4;'0&(^95Od?HW3OQ,7B6`,)WqOS31
%_qW!0N1[cSk5i+6o&g9A++H0!&o_(Po.ei6!80.mh:dnK"q[&cV*RdebZD8\6ah/3o%R98nfj%-nSOha6*tMsC!9ST$O+=l>5]N+
%HQ:N5%p.ZdkPKI55$e-dgM`^tI/3BYJ,K*@"l?pO[1K,P@D\#SMQA(k&ArdKAa44[@0`,*Yo:QM^\:%433XMZ`;sWZ7uR`br:Ppk
%QBZZ3,pW#Lq@+e3m#1df#+@?F57/22KTT1Z;t\M[m&/"/Q*n5g$2:;3\Nq)(bcEbKTo-._kTa0@^#tJm_QIBSpnHc(j>$<)podE.
%N`r"kTq^#7+bNM[0Dk7o=oFe10SA;O,1#/G-pJde7EJUh]s?-<UI6gS&i5C?C.+;/Y?EeX1jWD3>Zgf_3JB\1;sU@rlZ?U1k,300
%oT%Z+B9U\8!?;?s[HaeQZ.9uSIF=/]<Z*BDJ^!00ead5OV1/iFCZo<62TVVGX`r8]DDGQAP76X2&SNih(".s[',?j9$Cr)4-L;)!
%G7:@8?ZAuaV5%c3PH3cj?'9*o12&Z.H46;I0'H*Spu=\0,m!6DJ^Yu$*K&b+9,(MZ<Vd-GC:2`e#?Lib.dKXgAlFk/rBT(5+DKBf
%O#dANqD=FX$!39,d9rW-ffrL\XO)e'n50?r\>'?CF[!#R)SOFV@T6WB`5,\bE>(Celqh5>lkXh'Z2jgT0Uh(eI#ndcG'Oh0'?G^>
%((aTlE6'M,;7jK`lC$.`:a@DYC*b/1AB7?cR<qqG9tJ,tD43YK4XdmP/(&@;K<30=`m>m@K;VPf[cC$np(<*2ZY!`Hjgg<Za>oaM
%&W7Tt09`>G'uqT!r7GgPP*l>cG4]1_.[O9K`e*>`];SK51h>/sfBf:D=gfebQZ?R:&h^XX\B+d)`\5c4?L!f!h@Sae[2PkPO1U6j
%jJrpP5l":$P0n_(_>sj1d73J8+d96^)#W#F;=,gMp5t17-4Uf1mBC2bAP;n+Yo^2/OW9AQq-F^M(5EkQ'/3NC3uVg&\@ReiJ]oa6
%;Mk(j"7VF]C.EOar"X5nTS=\3"OZaLFIUE8mRbdEL".gY8b/FJDI>bkYO/oFBB7@2;7Yr673:MLlaRgo%"k$8MY"#%$eTOT)!8</
%qpslQA$Pa4*jG&GTjVaW`HC"==FmdDN3-UM]>F:+kop6i(EG+0H4_$RZE/qTp*a7ujMQBLYm9u*q@UAtm^sXDS4@8*jp8k15T7[X
%O</ZgI>0nm4A9YlNXq>*9+k6[*,N]D';MNOCl5f]B&6BCp,B6'aS-;=<thkG]0KBP>133i8[Hb)aGNP.>pR<aP\-.;j?-(@7I]t>
%LUjU6FX1l/Y8nCSc5i_jeOhjrP$!G3-:VRjqKXi"H"G$jYh9LV-:^-uJudE1;")qV#YD-PhK<S(,fdcc?KF9X.'-0-e/$@Vj5W(=
%P+L7*:?BsA?>T\/p'R0(6)Ff.%'3n4(s_9.kMCnk0$`F5Yc,=#WSH"%_[H`L#6m7JksAnNi%`\lFW`3;#u+GjM)EM"Hr6$\<IA>u
%1/C%qMoa5Db\\Dq,R]c0a/"p**\h!ZDo!KaFK.>JIJ'X*iRKcQ*>#s5jlR87MpS^ogcA3^`Er;:9AAJ)nb@((7N-HH@F.'hbmAMc
%]-%Bh[FE)gn@TKDK[?mQ,a0(J=AZd=/.kbN9?4S@=9]B=G#GOL)9.Vkqgb"8''_k)V</dd/N-79Wte;P_g!:':Zt6_Z=RkLeE`8t
%I2V_gIk4]!dnXpBA6;1N2;OKsUl3fZnYklI,XkkqgP-,lRogS>Hsh@sYZ,;`)$E0M?2>TCA^0eUCZ@>r:fGM-6GYA#g6M;5[YP\U
%[lQl1(Oc,!i2$h))JI\=RKkM34+QL?m-s'l7Lu]kN?<XhEs/nu)e2DJ%j+76hf9\io^!NNGTUWB&#?_b>NM\rE3*C0:k4c,F7DYJ
%Y=OI-XCitFQ&49tJVI5;?Ub72jJ8MZUho"c0GDG61/A&r,TsLXpt9(k`YLNa]'s9N0Z\CgWh;OE3%Rm'*jT-`B@"HeOqHLOfVOd,
%J]!d^pbu'mZrs*%?jm-M#rmWb[,Gh1no<;cQuaj)f%5%0H"Wjf<3=ddATJ%6(SVLL,mj5`4uC-/;R>.MU#h:b8e`3kSC8e@%t0TI
%nXOpo'5)B,_[#cD*W&W$]\`d9F+N/*d<DPl>,2V]!rPaqQ:23&CPfqF5B$%38.(1S4YMZ.`.9n&?Npc=&o\FZbZ.8DpVc:SDGG1M
%DANje^m4>hMCrnJM(sia-Bd.XG(dIA.@L^N99QGO5!a=UZ`mtt)%W"jJulh0:g(&+Cf(g'9'A9_/_[E4bQ5"V_&&qr$AM/eq_/bH
%>AZU-1nUu\*9ucs6B4i!B7bRJ1!V>i#m)UkfS0?0`(`^_/bhVf/pW$?E21g*4N!&C`.;5,N\=*sJ6*H-$5eUJQ3UQ6Z2uPVmfp+.
%mLIXf`<FkITu;Qg&*A+^D`EN(]`CP0G(rs7nE#9`rdJcfdGJ.1Hgd[_-Q1hq1#qD>?b7#1PW^j4&&+/4*/)9=[!_rLBZiFs+qZLF
%F_=0\Agog%dEW=[@(:D`K7,O)+UZW_+q[@j%qrT7rZOba0B$+HUp&d6U.Oi%K5AA^QAU[?n';:/,oVDX'=n'P(^e,dA#ARTj;QON
%0k(ld(Q^S-9(tgEJoRO+7j=ZJE+VORJkS[dF,K!XB'gF\K0uTt)aVQdNZj8fmJu+bLN]MZ!BVU3OZ0#Q.Jj/Ji,FTJ>UPDST+KYA
%Z[Mj5DOQSW6i?WB/#Im4A)3mh<>fU\TFFt`h#fY2+G2u&&C5=?E!f!3A6.V,:p$odC9<Mjf#f*=[PL;gEY1/,<:/D+18g@$(oM$X
%][G^Yc*T_I_1iteA9i4D7l]Wa"jUt"Pm4Zlma[g]b9H>JJk'qUOj!-5h&1J,_!]"=3urpfhs(j@SQhY*DsK.$'?8`c#T?F\$Dp*Y
%R:FEQE`EFTJHDILj1AX#AJX#t!sGFf#C$tnOEj>+9B0smG9%,Mjb4sq$d]dXp.\-/`lc*kk]CiJ97S5\J4O</(1YcmA_p[c4(RlF
%pGj1+?(*^1^/VXLX%?S:,hE#1BOnJA\rrNnqV);0eSQrF:E;*1Me"Z\mVTVh";ePSOd1$80dEQn?lLhWAT9G$Ho(&h%N6/]H.?1;
%*-bVrs"M5JW]6B`Re9N9kG0oUnshm7(H3KXo/N/4J7nT]A*tuKlIk&QpQu<#6F`7(8d6*b@k,`^XS[Bq%u69]6N'Q_1gVnYA1L)S
%4ZNe+)lITjq`Wq2RO8n(0][o+R]*4AeJLRY>&:F<k4!mK$YBh%=gbPOpt@/l*gGb!eDo(EEEmCNNtIK8"];CB^B*1c+M+TaJ,'Ch
%s623MI*Kc]J\-E*U[_`iX*%qMo$0],G.JWB^XM-`F36_Z^R&7e:LU=<U*@"eWl%[FMT35e($lVO@C?/O;j2lQ>)@^pi<7=J'+I>7
%cO_3LjQi-bCe-bkiul-$XicSR%.15AG&Y?Wb)9nDB[Api-SH_'$Dij)EXu<cE.kGp"1rN?VmK?XmiaQk"5RE"2]NL*&c;jNA!\2T
%1W"tX:-%_uC$fA5JSNO8`"WTb1Oa53HK*"mJhC(#b^n%<c%Wn0'Nt^b!.:8CKU/a\N_^]YH?adXr2=(C"PMq^0r0g7O!;EJjZ$T1
%fh\8PT0&,NfB&b.Ak9ot]F23.Y)17u;2[e8F5Zjs>c;']F?TC^_FHiS9ro[Sjt7DeVbWL>jap_\iaj-ZWDEgDU*f/b<"6h/:E85U
%C_jp./RH4c`&%W:U(kSSC*<OO]$^YDh<a53qe?DS1m+FKB#k2\X,G?7_TsIu4FXC;RB[LKo0L)!<u+(7?P1](=9mWbWBCD9&7IT"
%55ZgHk#jYd[*QP45/mqL@1:+kJ)D`t3W#Ih`",%V,RGqbHn;h.*^6#"=[-jfdI=7MeT@ra):NrC?TES*!9E.mE.>pCrcSR=I@m/3
%na2sP?i9K[h:&8hnDrJ6r:'!dhS"14k1.)IIeU`U00[%[HL^\\>5%6"j3cBfmp>tbrl95dY($65O8f:grb2;IP:(kX[t"5=GQ/%c6SD=~>
%AI9_PrivateDataEnd
